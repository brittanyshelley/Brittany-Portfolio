{"mappings":"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","sources":["node_modules/@tsparticles/updater-roll/browser/RollUpdater.js","node_modules/@tsparticles/updater-roll/browser/Utils.js","node_modules/@tsparticles/updater-roll/browser/Options/Classes/Roll.js","node_modules/@tsparticles/updater-roll/browser/Options/Classes/RollLight.js"],"sourcesContent":["import { initParticle, updateRoll } from \"./Utils.js\";\nimport { Roll } from \"./Options/Classes/Roll.js\";\nexport class RollUpdater {\n    getTransformValues(particle) {\n        const roll = particle.roll?.enable && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        initParticle(particle);\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!roll?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source?.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n","import { getRandom, getRangeValue, halfRandom, rangeColorToHsl } from \"@tsparticles/engine\";\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360;\nexport function initParticle(particle) {\n    const rollOpt = particle.options.roll;\n    if (!rollOpt?.enable) {\n        particle.roll = {\n            enable: false,\n            horizontal: false,\n            vertical: false,\n            angle: 0,\n            speed: 0,\n        };\n        return;\n    }\n    particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n        vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n        angle: getRandom() * doublePI,\n        speed: getRangeValue(rollOpt.speed) / maxAngle,\n    };\n    if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(rollOpt.backColor);\n    }\n    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = getRandom() >= halfRandom ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n        };\n    }\n    else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n            type: \"darken\",\n            value: getRangeValue(rollOpt.darken.value),\n        };\n    }\n    else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n            type: \"enlighten\",\n            value: getRangeValue(rollOpt.enlighten.value),\n        };\n    }\n}\nexport function updateRoll(particle, delta) {\n    const roll = particle.options.roll, data = particle.roll;\n    if (!data || !roll?.enable) {\n        return;\n    }\n    const speed = data.speed * delta.factor, max = doublePI;\n    data.angle += speed;\n    if (data.angle > max) {\n        data.angle -= max;\n    }\n}\n","import { OptionsColor, setRangeValue, } from \"@tsparticles/engine\";\nimport { RollLight } from \"./RollLight.js\";\nexport class Roll {\n    constructor() {\n        this.darken = new RollLight();\n        this.enable = false;\n        this.enlighten = new RollLight();\n        this.mode = \"vertical\";\n        this.speed = 25;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.backColor !== undefined) {\n            this.backColor = OptionsColor.create(this.backColor, data.backColor);\n        }\n        this.darken.load(data.darken);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.enlighten.load(data.enlighten);\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n    }\n}\n","import { setRangeValue } from \"@tsparticles/engine\";\nexport class RollLight {\n    constructor() {\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\n"],"names":["$64BDM","parcelRequire","$e2fd8b5c5d88df45$export$b21adf6f4d6d0a6a","getTransformValues","particle","roll","enable","rollHorizontal","horizontal","rollVertical","vertical","a","Math","cos","angle","undefined","d","sin","init","initParticle","isEnabled","options","destroyed","spawning","loadOptions","sources","$bZu0M","Roll","source","load","update","delta","this","updateRoll","$i0lBz","$46c050755b5973ba$var$doublePI","PI","$46c050755b5973ba$export$5f19b033575b4930","rollOpt","mode","getRandom","speed","getRangeValue","backColor","rangeColorToHsl","darken","enlighten","alterType","halfRandom","alter","type","value","$46c050755b5973ba$export$449a3d30f609ff1a","data","factor","max","$8bacabe5fbda5246$export$aa11096b70371f74","constructor","$bXONT","RollLight","OptionsColor","create","setRangeValue","$8b5c9cf33f36fab2$export$16e8cbb26bb35e82"],"version":3,"file":"RollUpdater.cdb236e9.js.map"}