{"mappings":"4UAAA,IAAAA,EAAAC,EAAA,S,aAEO,MAAMC,EACTC,eAAeC,EAAUC,EAASC,EAAQC,GACtC,MAAmCC,EAAlBJ,EAASK,QAAmCC,QAC7D,IAAKF,EACD,MAAO,GAEX,MAAME,EAAUF,EAAeG,UAAWC,EAAYF,EAAQG,SAAU,EAAAb,EAAAc,aAAcJ,EAAQK,UAAWC,EAAgBZ,EAASK,QAAQQ,OAAqBC,GAAH,EAA+Bd,EAASe,eAAiBH,EAAcI,YAAaC,EAAmBT,GAAY,EAAAZ,EAAAsB,eAAcZ,EAAQH,SAAWW,EAAiBX,EAASgB,GAAa,EAAAvB,EAAAwB,iBAAgBd,EAAQe,OAAQC,EAAeH,GAAa,EAAAvB,EAAA2B,iBAAgBJ,EAAYF,QAAoBO,EAAWC,EAAM,GAAIC,EAAelB,GAAac,EAGpf,OAFAG,EAAIE,KAAOD,EAAeJ,OAAeE,EACzCC,EAAIG,OAASF,EAAeJ,OAAeE,EACpCC,C,CAEXI,mBACUC,QAAQC,S,CAElBC,UAAUhC,GACN,MAAmCI,EAAlBJ,EAASK,QAAmCC,QAC7D,QAAKF,GAGEA,EAAeG,UAAUE,M,CAEpCwB,YAAY5B,KAAY6B,GACf7B,EAAQC,UACTD,EAAQC,QAAU,IAAI,EAAA6B,EAAAC,UAE1B,IAAK,MAAMC,KAAUH,EACjB7B,EAAQC,QAAQgC,KAAKD,GAAQ/B,Q,CAGrCuB,qBACUC,QAAQC,S,uEChCtB,IAAAQ,EAAA1C,EAAA,SACO,MAAM2C,EACTC,cACIC,KAAKC,MAAQ,IAAI,EAAAJ,EAAAK,eACjBF,KAAKnC,UAAY,IAAI,EAAAgC,EAAAK,c,CAEzBN,KAAKO,GACIA,IAGLH,KAAKC,MAAML,KAAKO,EAAKF,OACrBD,KAAKnC,UAAU+B,KAAKO,EAAKtC,W,6ECXjC,IAAAX,EAAAC,EAAA,SACO,MAAMiD,EACTL,cACIC,KAAKjC,QAAS,EACdiC,KAAK/B,UAAY,IACjB+B,KAAKvC,QAAU,C,CAEnBmC,KAAKO,GACIA,SAGcrB,IAAfqB,EAAKxB,QACLqB,KAAKrB,MAAQzB,EAAAmD,aAAaC,OAAON,KAAKrB,MAAOwB,EAAKxB,aAElCG,IAAhBqB,EAAKpC,SACLiC,KAAKjC,OAASoC,EAAKpC,aAEAe,IAAnBqB,EAAKlC,YACL+B,KAAK/B,UAAYkC,EAAKlC,gBAELa,IAAjBqB,EAAK1C,UACLuC,KAAKvC,SAAU,EAAAP,EAAAqD,eAAcJ,EAAK1C,U","sources":["node_modules/@tsparticles/updater-twinkle/browser/TwinkleUpdater.js","node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/Twinkle.js","node_modules/@tsparticles/updater-twinkle/browser/Options/Classes/TwinkleValues.js"],"sourcesContent":["import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle.js\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOffset = 1, zOpacityFactor = (zOffset - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    async init() {\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source?.twinkle);\n        }\n    }\n    async update() {\n        await Promise.resolve();\n    }\n}\n","import { TwinkleValues } from \"./TwinkleValues.js\";\nexport class Twinkle {\n    constructor() {\n        this.lines = new TwinkleValues();\n        this.particles = new TwinkleValues();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.lines.load(data.lines);\n        this.particles.load(data.particles);\n    }\n}\n","import { OptionsColor, setRangeValue, } from \"@tsparticles/engine\";\nexport class TwinkleValues {\n    constructor() {\n        this.enable = false;\n        this.frequency = 0.05;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = setRangeValue(data.opacity);\n        }\n    }\n}\n"],"names":["$i0lBz","parcelRequire","$0cf01864c3fb8ab6$export$ea14214ae03f2c07","getColorStyles","particle","context","radius","opacity","twinkleOptions","options","twinkle","particles","twinkling","enable","getRandom","frequency","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","twinklingOpacity","getRangeValue","twinkleRgb","rangeColorToHsl","color","twinkleStyle","getStyleFromHsl","undefined","res","needsTwinkle","fill","stroke","async","Promise","resolve","isEnabled","loadOptions","sources","$74AQo","Twinkle","source","load","$f6ine","$52657c910ed4288a$export$d2019f714f998af1","constructor","this","lines","TwinkleValues","data","$afe5ab33ae55422f$export$f548b4b237268fab","OptionsColor","create","setRangeValue"],"version":3,"file":"TwinkleUpdater.2c82623a.js.map"}