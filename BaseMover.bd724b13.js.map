{"mappings":"uUAAA,IAAAA,EAAAC,EAAA,S,aAGO,MAAMC,EACTC,KAAKC,GACD,MAAkCC,EAAlBD,EAASE,QAAkCC,KAAKC,QAChEJ,EAASI,QAAU,CACfC,OAAQJ,EAAeI,OACvBC,cAAc,EAAAV,EAAAW,eAAcN,EAAeK,cAC3CE,QAASP,EAAeO,UAE5B,EAAAC,EAAAC,UAASV,E,CAEbW,UAAUX,GACN,OAAQA,EAASY,WAAaZ,EAASE,QAAQC,KAAKE,M,CAExDF,KAAKH,EAAUa,GACX,MAAMC,EAAkBd,EAASE,QAASa,EAAcD,EAAgBX,KACxE,IAAKY,EAAYV,OACb,OAEJ,MAAMW,EAAYhB,EAASgB,UAAWC,EAAUD,EAAUE,OAAOC,WACjEnB,EAASkB,OAAOE,aAAc,EAAAxB,EAAAW,eAAcQ,EAAYM,OAASJ,EACjEjB,EAASkB,OAAOI,aAAc,EAAA1B,EAAAW,eAAcP,EAASE,QAAQC,KAAKoB,OAASN,EAC3E,MAAMO,GAAa,EAAAf,EAAAgB,yBAAwBzB,GAAW0B,EAAY1B,EAASkB,OAAOE,UAAYJ,EAAUE,OAAOS,aAAcL,EAAYtB,EAASkB,OAAOI,UAAWM,GAAU,EAAAhC,EAAAiC,aAAYf,EAAgBgB,KAAKC,OAASd,EAA+IG,EAAYM,GAArIX,EAAYe,KAAO9B,EAASgC,YAAcJ,EAtBtP,GAsB2WJ,GAA1EX,EAAMoB,QAtB/Q,GAA/C,EAsB0aC,EAAWlC,EAASkB,OAAOgB,UAAYlB,EAAUE,OAAOgB,SACzenB,EAAYoB,KAAK9B,QACjB,EAAAI,EAAA0B,MAAKnC,EAAUoB,IAGf,EAAAX,EAAAN,MAAKH,EAAUe,EAAaK,EAAWc,EAAUZ,EAAWT,IAEhE,EAAAJ,EAAA2B,eAAcpC,E,oNC/BtB,IAAAJ,EAAAC,EAAA,SAEO,SAASwC,EAAcrC,GAC1B,MAAMsC,EAAkBtC,EAASsC,iBAAiBC,GAAEA,EAAEC,GAAEA,IAAO,EAAA5C,EAAA6C,cAAaH,EAAiBtC,EAAS0C,UAAWC,EAAUC,KAAKC,IAAIN,GAAKO,EAAUF,KAAKC,IAAIL,IAAKO,YAAEA,GAAgB/C,EAASkB,OAAQ8B,EAAYD,EAAYE,WAAYC,EAAYH,EAAYI,SAChQ,IAAKH,IAAcE,EACf,OAGJ,MADsBF,GAAaL,GAAWK,KAAc,OAAuBE,GAAaJ,GAAWI,KAAc,IAClFlD,EAASoD,WAS3C,KAAMJ,GAAaL,EAAUK,MAAgBE,GAAaJ,EAAUI,IAAclD,EAASoD,UAC5FpD,EAASoD,WAAY,OAEpB,GAAIpD,EAASoD,UAAW,CACzB,MAAMC,EAAMrD,EAAS0C,SAAUY,EAAMtD,EAASuD,SAC1CP,IACCK,EAAKG,EAAIlB,EAAgBkB,GAAKF,EAAIE,EAtBf,GAsBoCH,EAAIG,EAAIlB,EAAgBkB,GAAKF,EAAIE,EAtBrE,KAuBpBF,EAAIE,KAAM,EAAA5D,EAAA6D,cAEVP,IACCG,EAAKK,EAAIpB,EAAgBoB,GAAKJ,EAAII,EA1Bf,GA0BoCL,EAAIK,EAAIpB,EAAgBoB,GAAKJ,EAAII,EA1BrE,KA2BpBJ,EAAII,KAAM,EAAA9D,EAAA6D,a,OAnBdzD,EAASoD,YAAeJ,GAAaL,EAAUK,KAAiBE,GAAaJ,EAAUI,EACnFF,IACAhD,EAASuD,SAASC,EAVjB,GAUqBxD,EAASuD,SAASG,EAAW1D,EAASuD,SAASC,GAErEN,IACAlD,EAASuD,SAASG,EAbjB,GAaqB1D,EAASuD,SAASC,EAAWxD,EAASuD,SAASG,E,CAkB1E,SAASC,EAAK3D,EAAUe,EAAaK,EAAWc,EAAUZ,EAAWT,IAsDrE,SAAmBb,EAAUa,GAChC,MAA2C+C,EAAlB5D,EAASE,QAAwCC,KAAK0D,KAC/E,IADmGD,EAAYvD,OAE3G,OAEJ,GAAIL,EAAS8D,cAAgB9D,EAAS+D,UAElC,YADA/D,EAAS8D,cAAgBjD,EAAMkB,OAGnC,MAAM8B,EAAO7D,EAASgE,eAAeC,SAASjE,EAAUa,GACpDgD,GACA7D,EAASuD,SAASW,MAAML,GAExBD,EAAYO,QACZnE,EAASuD,SAASC,GAAI,EAAA5D,EAAAuE,OAAMnE,EAASuD,SAASC,GAnGR,KAoGtCxD,EAASuD,SAASG,GAAI,EAAA9D,EAAAuE,OAAMnE,EAASuD,SAASG,GApGR,MAsG1C1D,EAAS8D,cAAgB9D,EAAS+D,S,CAtElCK,CAAUpE,EAAUa,GACpB,MAAMZ,EAAiBD,EAASI,QAASiE,EAAgBpE,GAAgBI,QAAUJ,EAAeO,SAjCxD,IAkCtCc,GAAaF,IACbpB,EAASuD,SAASC,GAAKlC,EAAaT,EAAMoB,QAnCiB,GAmCYb,IAEvEnB,GAAgBI,QAAUe,IAC1BpB,EAASuD,SAASG,GACdW,GAAkBpE,EAAeK,aAAeO,EAAMoB,SAvCC,GAuC6Bb,IAE5F,MAAMkD,EAAQtE,EAASuE,UACvBvE,EAASuD,SAASiB,OAAOF,GACzB,MAAMf,EAAWvD,EAASuD,SAASkB,KAAKrD,GACpCnB,GAAgBI,QAChB6B,EA7CwB,KA8CrBjC,EAAeO,SAAW+C,EAASG,GA9Cd,GA8CkCH,EAASG,GAAKxB,GACnEjC,EAAeO,SAAW+C,EAASG,GA/ChB,GA+CoCH,EAASG,IAAMxB,KAC3EqB,EAASG,EAAIW,EAAgBnC,EACzBd,IACApB,EAASuD,SAASG,EAAIH,EAASG,EAAItC,IAG3C,MAAMsD,EAAgB1E,EAASE,QAAQyE,OAAQC,GArDL,EAqDmC5E,EAAS6E,eAAiBH,EAAcI,aACrHvB,EAASiB,OAAOI,GAChB,MAAMlC,SAAEA,GAAa1C,EACrB0C,EAASwB,MAAMX,GACXxC,EAAYgE,UACZrC,EAASc,GAAKZ,KAAKoC,IAAItC,EAASc,EAAIZ,KAAKqC,IAAIvC,EAASgB,IACtDhB,EAASgB,GAAKd,KAAKqC,IAAIvC,EAASgB,EAAId,KAAKoC,IAAItC,EAASc,I,CAGvD,SAAS0B,EAAKlF,EAAUoB,GAC3B,MAAMJ,EAAYhB,EAASgB,UAC3B,IAAKhB,EAASmC,KACV,OAEJ,MAAMgD,EAAa,CACf3B,EAA+B,cAA5BxD,EAASmC,KAAKiD,UAA4BxC,KAAKqC,IAAMrC,KAAKoC,IAC7DtB,EAA+B,cAA5B1D,EAASmC,KAAKiD,UAA4BxC,KAAKoC,IAAMpC,KAAKqC,KAEjEjF,EAAS0C,SAASc,EAAIxD,EAASmC,KAAKkD,OAAO7B,EAAIxD,EAASmC,KAAKmD,OAASH,EAAW3B,EAAExD,EAASmC,KAAKoD,OACjGvF,EAAS0C,SAASgB,EAAI1D,EAASmC,KAAKkD,OAAO3B,EAAI1D,EAASmC,KAAKmD,OAASH,EAAWzB,EAAE1D,EAASmC,KAAKoD,OACjGvF,EAASmC,KAAKmD,QAAUtF,EAASmC,KAAK7B,aACtC,MAAMkF,EAAgB5C,KAAK6C,IAAIzE,EAAU0E,OAAO5D,KAAK6D,MAAO3E,EAAU0E,OAAO5D,KAAK8D,QAASC,EA1ElF,GA0EgGL,EACrGxF,EAASmC,KAAKmD,OAASO,GACvB7F,EAASmC,KAAKmD,OAASO,EACvB7F,EAASmC,KAAK7B,eA7EwB,GA+EjCN,EAASmC,KAAKmD,OA/E4D,IAgF/EtF,EAASmC,KAAKmD,OAhFiE,EAiF/EtF,EAASmC,KAAK7B,eAjFwB,GAmF1CN,EAASmC,KAAKoD,OAnFqF,IAmF5EnE,GAnFmB,EAmFkBpB,EAASmC,KAAKmD,OAASE,E,CAqBhF,SAASM,EAAwB9F,GACpC,OAAOA,EAAS+F,KAAKC,QAAUhG,EAAS+F,KAAK9D,OAzGH,C,CA2GvC,SAASgE,EAASjG,GACrB,MAAMgB,EAAYhB,EAASgB,UAAuCkF,EAAlBlG,EAASE,QAA+BC,KAAKgC,KAC7F,IAAK+D,EAAY7F,OACb,OAEJ,MAAM8F,EAAUD,EAAYxD,UAAY,CAAEc,EAAG,GAAIE,EAAG,IAAyB0C,EAAa,CACtF5C,EADmE,IAChE2C,EAAQ3C,EAAiBxC,EAAU0E,OAAO5D,KAAK6D,MAClDjC,EAFmE,IAEhEyC,EAAQzC,EAAiB1C,EAAU0E,OAAO5D,KAAK8D,QACnDvC,EAAMrD,EAASqG,cAAeC,GAAW,EAAA1G,EAAA2G,aAAYlD,EAAK+C,GAAaI,GAAmB,EAAA5G,EAAAW,eAAc2F,EAAY5F,cACvHN,EAASkB,OAAOsF,iBAAmBA,EAAmBxF,EAAUE,OAAOC,WAEvEnB,EAASmC,KAAO,CACZkD,OAAQe,EACRhB,UAAWpF,EAASuD,SAASC,GAHb,EAGgC,YAAc,oBAC9D+B,MAAOvF,EAASuD,SAASgC,MACzBD,OAAQgB,EACRhG,aAAcN,EAASkB,OAAOsF,iB","sources":["node_modules/@tsparticles/move-base/browser/BaseMover.js","node_modules/@tsparticles/move-base/browser/Utils.js"],"sourcesContent":["import { getRangeMax, getRangeValue } from \"@tsparticles/engine\";\nimport { applyDistance, getProximitySpeedFactor, initSpin, move, spin } from \"./Utils.js\";\nconst diffFactor = 2, defaultSizeFactor = 1, defaultDeltaFactor = 1;\nexport class BaseMover {\n    init(particle) {\n        const options = particle.options, gravityOptions = options.move.gravity;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        initSpin(particle);\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, pxRatio = container.retina.pixelRatio;\n        particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio;\n        particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio;\n        const slowFactor = getProximitySpeedFactor(particle), baseSpeed = particle.retina.moveSpeed * container.retina.reduceFactor, moveDrift = particle.retina.moveDrift, maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : defaultSizeFactor, deltaFactor = delta.factor || defaultDeltaFactor, moveSpeed = (baseSpeed * sizeFactor * slowFactor * deltaFactor) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n        }\n        applyDistance(particle);\n    }\n}\n","import { clamp, getDistance, getDistances, getRandom, getRangeValue, } from \"@tsparticles/engine\";\nconst half = 0.5, minVelocity = 0, identity = 1, moveSpeedFactor = 60, minSpinRadius = 0, spinFactor = 0.01;\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    const hasHDistance = (hDistance && dxFixed >= hDistance) ?? false, hasVDistance = (vDistance && dyFixed >= vDistance) ?? false;\n    if ((hasHDistance || hasVDistance) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y * half - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x * half - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance &&\n            ((pos.x < initialPosition.x && vel.x < minVelocity) || (pos.x > initialPosition.x && vel.x > minVelocity))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance &&\n            ((pos.y < initialPosition.y && vel.y < minVelocity) || (pos.y > initialPosition.y && vel.y > minVelocity))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -identity : identity;\n    if (moveDrift && moveSpeed) {\n        particle.velocity.x += (moveDrift * delta.factor) / (moveSpeedFactor * moveSpeed);\n    }\n    if (gravityOptions?.enable && moveSpeed) {\n        particle.velocity.y +=\n            (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (moveSpeedFactor * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    if (gravityOptions?.enable &&\n        maxSpeed > minVelocity &&\n        ((!gravityOptions.inverse && velocity.y >= minVelocity && velocity.y >= maxSpeed) ||\n            (gravityOptions.inverse && velocity.y <= minVelocity && velocity.y <= -maxSpeed))) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n    }\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (identity - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    velocity.multTo(zVelocityFactor);\n    const { position } = particle;\n    position.addTo(velocity);\n    if (moveOptions.vibrate) {\n        position.x += Math.sin(position.x * Math.cos(position.y));\n        position.y += Math.cos(position.y * Math.sin(position.x));\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height), halfMaxSize = maxCanvasSize * half;\n    if (particle.spin.radius > halfMaxSize) {\n        particle.spin.radius = halfMaxSize;\n        particle.spin.acceleration *= -identity;\n    }\n    else if (particle.spin.radius < minSpinRadius) {\n        particle.spin.radius = minSpinRadius;\n        particle.spin.acceleration *= -identity;\n    }\n    particle.spin.angle += moveSpeed * spinFactor * (identity - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = particle.pathGenerator?.generate(particle, delta);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -identity, identity);\n        particle.velocity.y = clamp(particle.velocity.y, -identity, identity);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : identity;\n}\nexport function initSpin(particle) {\n    const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n    if (!spinOptions.enable) {\n        return;\n    }\n    const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinFactor = 0.01, spinCenter = {\n        x: spinPos.x * spinFactor * container.canvas.size.width,\n        y: spinPos.y * spinFactor * container.canvas.size.height,\n    }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n    particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n    const minVelocity = 0;\n    particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= minVelocity ? \"clockwise\" : \"counter-clockwise\",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration,\n    };\n}\n"],"names":["$i0lBz","parcelRequire","$5f320ec97bc13714$export$c506fa331d75adff","init","particle","gravityOptions","options","move","gravity","enable","acceleration","getRangeValue","inverse","$k9uSe","initSpin","isEnabled","destroyed","delta","particleOptions","moveOptions","container","pxRatio","retina","pixelRatio","moveSpeed","speed","moveDrift","drift","slowFactor","getProximitySpeedFactor","baseSpeed","reduceFactor","maxSize","getRangeMax","size","value","getRadius","factor","maxSpeed","spin","applyDistance","$eabc98c8f6bf138a$export$21d7e305c937fbb2","initialPosition","dx","dy","getDistances","position","dxFixed","Math","abs","dyFixed","maxDistance","hDistance","horizontal","vDistance","vertical","misplaced","pos","vel","velocity","x","getRandom","y","$eabc98c8f6bf138a$export$d947e5f4f4c48d48","pathOptions","path","lastPathTime","pathDelay","pathGenerator","generate","addTo","clamp","$eabc98c8f6bf138a$export$2d1dd1364a451835","gravityFactor","decay","moveDecay","multTo","mult","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","vibrate","sin","cos","$eabc98c8f6bf138a$export$c82e186cf428d56d","updateFunc","direction","center","radius","angle","maxCanvasSize","max","canvas","width","height","halfMaxSize","$eabc98c8f6bf138a$export$7f3cc12c83994316","slow","inRange","$eabc98c8f6bf138a$export$2d310d1fc5fad1a1","spinOptions","spinPos","spinCenter","getPosition","distance","getDistance","spinAcceleration"],"version":3,"file":"BaseMover.bd724b13.js.map"}