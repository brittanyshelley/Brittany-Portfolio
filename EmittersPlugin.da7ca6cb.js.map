{"mappings":"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","sources":["node_modules/@tsparticles/plugin-emitters/browser/EmittersPlugin.js","node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/Emitter.js","node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterLife.js","node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterRate.js","node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShape.js","node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShapeReplace.js","node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterSize.js","node_modules/@parcel/runtime-js/lib/runtime-6e2662acb5c31416.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isArray, isInArray, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nexport class EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    async getPlugin(container) {\n        const { Emitters } = await import(\"./Emitters.js\");\n        return new Emitters(this._engine, container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, (emitter) => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if (isArray(interactivityEmitters)) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    const defaultCount = 1;\n                    if (isArray(emitterMode.value)) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((isArray(emitters) && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                isInArray(\"emitter\", options.interactivity.events.onClick.mode)));\n    }\n}\n","import { AnimatableColor, deepExtend, executeOnSingleOrMultiple, setRangeValue, } from \"@tsparticles/engine\";\nimport { EmitterLife } from \"./EmitterLife.js\";\nimport { EmitterRate } from \"./EmitterRate.js\";\nimport { EmitterShape } from \"./EmitterShape.js\";\nimport { EmitterSize } from \"./EmitterSize.js\";\nexport class Emitter {\n    constructor() {\n        this.autoPlay = true;\n        this.fill = true;\n        this.life = new EmitterLife();\n        this.rate = new EmitterRate();\n        this.shape = new EmitterShape();\n        this.startCount = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.size !== undefined) {\n            if (!this.size) {\n                this.size = new EmitterSize();\n            }\n            this.size.load(data.size);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.domId = data.domId;\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        this.life.load(data.life);\n        this.name = data.name;\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        this.rate.load(data.rate);\n        this.shape.load(data.shape);\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.spawnColor !== undefined) {\n            if (this.spawnColor === undefined) {\n                this.spawnColor = new AnimatableColor();\n            }\n            this.spawnColor.load(data.spawnColor);\n        }\n        if (data.startCount !== undefined) {\n            this.startCount = data.startCount;\n        }\n    }\n}\n","import { setRangeValue } from \"@tsparticles/engine\";\nexport class EmitterLife {\n    constructor() {\n        this.wait = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        if (data.duration !== undefined) {\n            this.duration = setRangeValue(data.duration);\n        }\n        if (data.wait !== undefined) {\n            this.wait = data.wait;\n        }\n    }\n}\n","import { setRangeValue } from \"@tsparticles/engine\";\nexport class EmitterRate {\n    constructor() {\n        this.quantity = 1;\n        this.delay = 0.1;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = setRangeValue(data.quantity);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n    }\n}\n","import { deepExtend } from \"@tsparticles/engine\";\nimport { EmitterShapeReplace } from \"./EmitterShapeReplace.js\";\nexport class EmitterShape {\n    constructor() {\n        this.options = {};\n        this.replace = new EmitterShapeReplace();\n        this.type = \"square\";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.options !== undefined) {\n            this.options = deepExtend({}, data.options ?? {});\n        }\n        this.replace.load(data.replace);\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n","export class EmitterShapeReplace {\n    constructor() {\n        this.color = false;\n        this.opacity = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = data.color;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","export class EmitterSize {\n    constructor() {\n        this.mode = \"percent\";\n        this.height = 0;\n        this.width = 0;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"an5o1\"))).then(() => parcelRequire('aLEob'));"],"names":["$i0lBz","parcelRequire","$e2f7a1d22d1a18b6$export$e445717c82398c28","constructor","engine","this","_engine","id","async","container","Emitters","loadOptions","options","source","needsPlugin","emitters","executeOnSingleOrMultiple","emitter","tmp","$iWxtT","Emitter","load","interactivityEmitters","interactivity","modes","isArray","random","count","enable","value","map","s","emitterMode","undefined","defaultCount","length","events","onClick","mode","isInArray","$dca79d72e125c977$export$4293555f241ae35a","autoPlay","fill","life","$fUqU5","EmitterLife","rate","$k9j83","EmitterRate","shape","$86gRf","EmitterShape","startCount","data","size","$4Q15Z","EmitterSize","direction","domId","name","particles","deepExtend","position","x","setRangeValue","y","spawnColor","AnimatableColor","$b950f480786b06c7$export$99c2b8efc08054b","wait","delay","duration","$eab37c7ed2d03289$export$c3191dc230acef25","quantity","$5e5bf5e87d93f019$export$e0f47148d50f3ef","replace","$hDD2B","EmitterShapeReplace","type","$cd745ce9993e853f$export$2c0f13eebb2527f7","color","opacity","$385cde51b87dfb1e$export$a8f8ab30882c6cf0","height","width","module","exports","import","resolve","then"],"version":3,"file":"EmittersPlugin.da7ca6cb.js.map"}