{"mappings":"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","sources":["node_modules/@tsparticles/plugin-absorbers/browser/AbsorberInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, percentDenominator, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nconst squareExp = 2, absorbFactor = 0.033, minOrbitLength = 0, minRadius = 0, minMass = 0, origin = {\n    x: 0,\n    y: 0,\n}, minAngle = 0, double = 2, maxAngle = Math.PI * double, minVelocity = 0;\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.origin;\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * maxAngle;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height), offset = 1, randomOffset = 0.1, randomFactor = 0.2;\n                    particle.absorberOrbit.length = minSize * (offset + (getRandom() * randomFactor - randomOffset));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= minVelocity ? \"clockwise\" : \"counter-clockwise\";\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                    y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? minVelocity) * container.retina.pixelRatio) / percentDenominator) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, squareExp)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < minOrbitLength)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= minRadius || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= minMass || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(origin.x, origin.y, this.size, minAngle, maxAngle, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n"],"names":["$i0lBz","parcelRequire","$829c9495541f34bb$var$origin","$829c9495541f34bb$var$maxAngle","Math","PI","$829c9495541f34bb$export$2b570af194d8d56d","constructor","absorbers","container","options","position","this","_calcPosition","exactPosition","calcPositionOrRandomFromSizeRanged","size","canvas","Vector","create","x","y","_updateParticlePosition","particle","v","destroyed","canvasSize","needsNewPosition","newPosition","calcPositionOrRandomFromSize","setTo","velocity","initialVelocity","absorberOrbit","undefined","orbits","origin","length","getDistance","getPosition","angle","getRandom","destroy","minSize","min","width","height","offset","randomOffset","randomFactor","absorberOrbitDirection","orbitRadius","orbitAngle","orbitDirection","updateFunc","cos","sin","retina","moveSpeed","pixelRatio","percentDenominator","reduceFactor","addV","addTo","initialPosition","$iCNdJ","Absorber","load","dragging","name","opacity","getRangeValue","value","mass","density","limit","radius","color","rangeColorToRgb","b","g","r","copy","attract","draggable","mouse","interactivity","clicking","downPosition","pos","dx","dy","distance","getDistances","pow","getRadius","sizeFactor","draw","context","translate","beginPath","arc","closePath","fillStyle","getStyleFromRgb","fill","resize","isPointInside"],"version":3,"file":"AbsorberInstance.c808bb05.js.map"}