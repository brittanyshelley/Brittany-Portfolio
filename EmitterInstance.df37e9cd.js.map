{"mappings":"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","sources":["node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, millisecondsToSeconds, randomInRange, rangeColorToHsl, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize.js\";\nconst half = 0.5, defaultLifeDelay = 0, minLifeCount = 0, defaultSpawnDelay = 0, defaultEmitDelay = 0, defaultLifeCount = -1, defaultColorAnimationFactor = 1;\nfunction setParticlesOptionsColor(particlesOptions, color) {\n    if (particlesOptions.color) {\n        particlesOptions.color.value = color;\n    }\n    else {\n        particlesOptions.color = {\n            value: color,\n        };\n    }\n}\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._destroy = () => {\n            this._mutationObserver?.disconnect();\n            this._mutationObserver = undefined;\n            this._resizeObserver?.disconnect();\n            this._resizeObserver = undefined;\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined, minDuration = 0, minLifeCount = 0;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > minLifeCount || this._immortal) &&\n                duration !== undefined &&\n                duration > minDuration) {\n                this._duration = duration * millisecondsToSeconds;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (delay * millisecondsToSeconds) / container.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = getRangeValue(animation.speed ?? defaultColorSpeed);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * factor) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay =\n            (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._lifeCount = this.options.life.count ?? defaultLifeCount;\n        this._immortal = this._lifeCount <= minLifeCount;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                this._mutationObserver = new MutationObserver(() => {\n                    this.resize();\n                });\n                this._resizeObserver = new ResizeObserver(() => {\n                    this.resize();\n                });\n                this._mutationObserver.observe(element, {\n                    attributes: true,\n                    attributeFilter: [\"style\", \"width\", \"height\"],\n                });\n                this._resizeObserver.observe(element);\n            }\n        }\n        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);\n        if (shapeGenerator) {\n            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);\n        }\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    async init() {\n        await this._shape?.init();\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (delay * millisecondsToSeconds) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > minLifeCount || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n        this._size = this._calcSize();\n        this.size = getSize(this._size, this.container.canvas.size);\n        this._shape?.resize(this.position, this.size);\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;\n            this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > minLifeCount || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._shape?.resize(this.position, this.size);\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? defaultLifeDelay) * millisecondsToSeconds) /\n                            this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n    _calcPosition() {\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;\n                return {\n                    x: (elRect.x + elRect.width * half) * pxRatio,\n                    y: (elRect.y + elRect.height * half) * pxRatio,\n                };\n            }\n        }\n        return calcPositionOrRandomFromSizeRanged({\n            size: this.container.canvas.size,\n            position: this.options.position,\n        });\n    }\n    _calcSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                    mode: \"precise\",\n                };\n            }\n        }\n        return (this.options.size ??\n            (() => {\n                const size = new EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: \"percent\",\n                    width: 0,\n                });\n                return size;\n            })());\n    }\n    _emit() {\n        if (this._paused) {\n            return;\n        }\n        const quantity = getRangeValue(this.options.rate.quantity);\n        this._emitParticles(quantity);\n    }\n    _emitParticles(quantity) {\n        const singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = deepExtend({}, singleParticlesOptions);\n            if (this.spawnColor) {\n                const hslAnimation = this.options.spawnColor?.animation;\n                if (hslAnimation) {\n                    const maxValues = {\n                        h: 360,\n                        s: 100,\n                        l: 100,\n                    }, colorFactor = 3.6;\n                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);\n                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);\n                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);\n                }\n                setParticlesOptionsColor(particlesOptions, this.spawnColor);\n            }\n            const shapeOptions = this.options.shape;\n            let position = this.position;\n            if (this._shape) {\n                const shapePosData = this._shape.randomPosition();\n                if (shapePosData) {\n                    position = shapePosData.position;\n                    const replaceData = shapeOptions.replace;\n                    if (replaceData.color && shapePosData.color) {\n                        setParticlesOptionsColor(particlesOptions, shapePosData.color);\n                    }\n                    if (replaceData.opacity) {\n                        if (particlesOptions.opacity) {\n                            particlesOptions.opacity.value = shapePosData.opacity;\n                        }\n                        else {\n                            particlesOptions.opacity = {\n                                value: shapePosData.opacity,\n                            };\n                        }\n                    }\n                }\n                else {\n                    position = null;\n                }\n            }\n            if (position) {\n                this.container.particles.addParticle(position, particlesOptions);\n            }\n        }\n    }\n}\n"],"names":["$i0lBz","parcelRequire","$109beb96d151c03a$var$setParticlesOptionsColor","particlesOptions","color","value","$109beb96d151c03a$export$834c246832f0a6df","constructor","engine","emitters","container","options","position","this","_destroy","_mutationObserver","disconnect","undefined","_resizeObserver","removeEmitter","_engine","dispatchEvent","data","emitter","_prepareToDie","_paused","duration","life","getRangeValue","retina","reduceFactor","_lifeCount","_immortal","_duration","millisecondsToSeconds","_setColorAnimation","animation","initValue","maxValue","factor","enable","colorOffset","randomInRange","offset","emitFactor","rate","delay","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","$iWxtT","Emitter","load","_spawnDelay","_calcPosition","name","fill","_firstSpawn","wait","_startParticlesAdded","deepExtend","particles","move","direction","spawnColor","rangeColorToHsl","autoPlay","_particlesOptions","_size","_calcSize","size","getSize","canvas","count","domId","element","document","getElementById","MutationObserver","resize","ResizeObserver","observe","attributes","attributeFilter","shapeOptions","shape","shapeGenerator","emitterShapeManager","getShapeGenerator","type","_shape","generate","play","externalPause","pause","externalPlay","async","init","_emitDelay","initialPosition","isPointInside","Vector","origin","update","delta","_emitParticles","startCount","_emit","elRect","getBoundingClientRect","pxRatio","pixelRatio","x","width","y","height","calcPositionOrRandomFromSizeRanged","mode","$4Q15Z","EmitterSize","quantity","singleParticlesOptions","itemFromSingleOrMultiple","i","hslAnimation","maxValues","h","s","l","colorFactor","shapePosData","randomPosition","replaceData","replace","opacity","addParticle"],"version":3,"file":"EmitterInstance.df37e9cd.js.map"}