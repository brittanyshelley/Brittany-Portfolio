{"mappings":"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","sources":["node_modules/@tsparticles/updater-life/browser/LifeUpdater.js","node_modules/@tsparticles/updater-life/browser/Options/Classes/Life.js","node_modules/@tsparticles/updater-life/browser/Options/Classes/LifeDelay.js","node_modules/@tsparticles/updater-life/browser/Options/Classes/LifeDuration.js","node_modules/@tsparticles/updater-life/browser/Utils.js"],"sourcesContent":["import { getRandom, getRangeValue, millisecondsToSeconds, } from \"@tsparticles/engine\";\nimport { Life } from \"./Options/Classes/Life.js\";\nimport { updateLife } from \"./Utils.js\";\nconst noTime = 0, identity = 1, infiniteValue = -1;\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            delayTime: noTime,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            time: noTime,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= noTime) {\n            particle.life.duration = infiniteValue;\n        }\n        if (particle.life.count <= noTime) {\n            particle.life.count = infiniteValue;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > noTime;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        updateLife(particle, delta, this.container.canvas.size);\n    }\n}\n","import { LifeDelay } from \"./LifeDelay.js\";\nimport { LifeDuration } from \"./LifeDuration.js\";\nexport class Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n","import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class LifeDelay extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class LifeDuration extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { getRangeValue, millisecondsToSeconds, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst noTime = 0, infiniteValue = -1, noLife = 0, minCanvasSize = 0;\nexport function updateLife(particle, delta, canvasSize) {\n    if (!particle.life) {\n        return;\n    }\n    const life = particle.life;\n    let justSpawned = false;\n    if (particle.spawning) {\n        life.delayTime += delta.value;\n        if (life.delayTime >= particle.life.delay) {\n            justSpawned = true;\n            particle.spawning = false;\n            life.delayTime = noTime;\n            life.time = noTime;\n        }\n        else {\n            return;\n        }\n    }\n    if (life.duration === infiniteValue) {\n        return;\n    }\n    if (particle.spawning) {\n        return;\n    }\n    if (justSpawned) {\n        life.time = noTime;\n    }\n    else {\n        life.time += delta.value;\n    }\n    if (life.time < life.duration) {\n        return;\n    }\n    life.time = noTime;\n    if (particle.life.count > noLife) {\n        particle.life.count--;\n    }\n    if (particle.life.count === noLife) {\n        particle.destroy();\n        return;\n    }\n    const widthRange = setRangeValue(minCanvasSize, canvasSize.width), heightRange = setRangeValue(minCanvasSize, canvasSize.width);\n    particle.position.x = randomInRange(widthRange);\n    particle.position.y = randomInRange(heightRange);\n    particle.spawning = true;\n    life.delayTime = noTime;\n    life.time = noTime;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n    if (lifeOptions) {\n        life.delay = getRangeValue(lifeOptions.delay.value) * millisecondsToSeconds;\n        life.duration = getRangeValue(lifeOptions.duration.value) * millisecondsToSeconds;\n    }\n}\n"],"names":["$i0lBz","parcelRequire","$f16fa74d03ff198b$export$ba0edc0e3650d019","constructor","container","this","init","particle","lifeOptions","options","life","delay","retina","reduceFactor","getRangeValue","value","sync","getRandom","millisecondsToSeconds","delayTime","duration","time","count","spawning","isEnabled","destroyed","loadOptions","sources","$l5DSk","Life","source","load","update","delta","$9e35Z","updateLife","canvas","size","$aJnLh","$f5a8feff334f4b17$export$305b21c541a8d65b","LifeDelay","$chL2M","LifeDuration","data","undefined","$7d0089ee5161f470$export$cfeee7551c31115e","ValueWithRandom","super","$8f1b9082199bb367$export$c09f84979931ae91","$6b77d292f4aaab65$export$eabc7277fffd179d","canvasSize","justSpawned","destroy","widthRange","setRangeValue","width","heightRange","position","x","randomInRange","y","reset"],"version":3,"file":"LifeUpdater.a13fe5a7.js.map"}