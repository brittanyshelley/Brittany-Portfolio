{"mappings":"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","sources":["node_modules/@tsparticles/plugin-emitters/browser/Emitters.js","node_modules/@parcel/runtime-js/lib/runtime-e3897cfb7fff8e71.js"],"sourcesContent":["import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray, } from \"@tsparticles/engine\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        const defaultIndex = 0;\n        container.getEmitter = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = async (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    async addEmitter(options, position) {\n        const { Emitter } = await import(\"./Options/Classes/Emitter.js\"), { EmitterInstance } = await import(\"./EmitterInstance.js\"), emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        await emitter.init();\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== \"emitter\") {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && isArray(modeEmitters.value)) {\n            const minLength = 0;\n            if (modeEmitters.value.length > minLength && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        void executeOnSingleOrMultiple(emittersOptions, async (emitter) => {\n            await this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (isArray(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                await this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            await this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter), minIndex = 0, deleteCount = 1;\n        if (index >= minIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"4lHI9\"))).then(() => parcelRequire('1qpoI'));"],"names":["$i0lBz","parcelRequire","$7d6d9f980a4ba89a$export$774a0fdf08f5f4fd","constructor","engine","container","this","_engine","array","emitters","interactivityEmitters","random","count","enable","value","getEmitter","idxOrName","undefined","isNumber","find","t","name","addEmitter","async","options","position","removeEmitter","emitter","playEmitter","externalPlay","pauseEmitter","externalPause","Emitter","Promise","resolve","EmitterInstance","emitterOptions","load","init","push","handleClickMode","mode","modeEmitters","emittersModeOptions","isArray","minLength","length","usedIndexes","i","idx","arrayRandomIndex","includes","itemFromArray","emittersOptions","ePosition","interactivity","mouse","clickPosition","executeOnSingleOrMultiple","actualOptions","modes","pause","play","index","indexOf","splice","resize","stop","update","delta","module","exports","import","then"],"version":3,"file":"Emitters.bc968fe4.js.map"}