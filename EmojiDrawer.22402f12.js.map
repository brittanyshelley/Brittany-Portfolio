{"mappings":"yUAAA,IAAAA,EAAAC,EAAA,S,0BAGA,MAAMC,EAAc,+FACb,MAAMC,EACTC,cACIC,KAAKC,gBAAkB,IAAIC,G,CAE/BC,UACI,IAAK,MAAOC,EAAKC,KAAcL,KAAKC,gBAC5BI,aAAqBC,cACrBD,GAAWE,QACXP,KAAKC,gBAAgBO,OAAOJ,G,CAIxCK,KAAKC,IACD,EAAAC,EAAAC,WAAUF,E,CAEdG,WAAWC,GACP,MAAMC,EAAUD,EAAUE,cAC1B,IAAKC,EAAAC,WAAWC,MAAMC,IAAM,EAAAzB,EAAA0B,WAAUD,EAAGL,EAAQO,UAAUC,MAAMC,QAC7D,OAEJ,MAAMC,EAAW,EAAC,EAAA9B,EAAA+B,UAAS7B,IAAe8B,EAAeV,EAAAC,WACpDU,KAAKR,GAAML,EAAQO,UAAUC,MAAMR,QAAQK,KAC3CD,MAAMC,KAAQA,IACfO,IACA,EAAAhC,EAAAkC,2BAA0BF,GAAeJ,IACjCA,EAAMO,MACNL,EAASM,MAAK,EAAApC,EAAA+B,UAASH,EAAMO,MAAM,UAIzCE,QAAQC,IAAIR,E,CAEtBS,gBAAgBC,UACLA,EAAS9B,S,CAEpB+B,aAAatB,EAAWqB,GACpB,MAAkBE,EAAYF,EAASE,UACvC,IAAKA,GAAWC,MACZ,OAEJ,MAAMC,GAAQ,EAAA5C,EAAA6C,0BAAyBH,EAAUC,MAAOH,EAASM,iBAAkBX,EAAOO,EAAUP,MAAQjC,EAC5G,IAAK0C,EACD,OAEJ,MAAMnC,EAAM,GAAGmC,KAAST,IAAQY,EAAe1C,KAAKC,gBAAgB0C,IAAIvC,GACxE,GAAIsC,EAEA,YADAP,EAAS9B,UAAYqC,GAGzB,MAAME,EAbS,GAaI,EAAAjD,EAAAkD,aAAYV,EAASW,KAAKR,OAC7C,IAAIjC,EACJ,MAAM0C,GAAU,EAAApD,EAAAkD,aAAYV,EAASW,KAAKR,OAC1C,GAA+B,oBAApBU,gBAAiC,CACxC,MAAMC,EAAS,IAAID,gBAAgBJ,EAAYA,GAAaM,EAAUD,EAAOE,WAAW,MACxF,IAAKD,EACD,OAEJA,EAAQpB,KAAO,OArBJ,EAqBWiB,OAAsBjB,IAC5CoB,EAAQE,aAAe,SACvBF,EAAQG,UAAY,SACpBH,EAAQI,SAASf,EAAOQ,EAASA,GACjC1C,EAAY4C,EAAOM,uB,KAElB,CACD,MAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,MAAQf,EACfY,EAAOI,OAAShB,EAChB,MAAMiB,EAAUL,EAAOL,WAAW,MAClC,IAAKU,EACD,OAEJA,EAAQ/B,KAAO,OAnCJ,EAmCWiB,OAAsBjB,IAC5C+B,EAAQT,aAAe,SACvBS,EAAQR,UAAY,SACpBQ,EAAQP,SAASf,EAAOQ,EAASA,GACjC1C,EAAYmD,C,CAEhBxD,KAAKC,gBAAgB6D,IAAI1D,EAAKC,GAC9B8B,EAAS9B,UAAYA,C,wCClFtB,SAAS0D,EAAUrD,GACtB,MAAMwC,QAAEA,EAAOf,SAAEA,EAAQ6B,OAAEA,EAAMC,QAAEA,GAAYvD,EAAML,EAAY8B,EAAS9B,UAAuB6D,EAAH,EAAcF,EAAiBG,EAAgBjB,EAAQkB,YAChJ/D,IAGL6C,EAAQkB,YAAcH,EACtBf,EAAQmB,UAAUhE,GAAY2D,GAASA,EAAQE,EAAUA,GACzDhB,EAAQkB,YAAcD,E","sources":["node_modules/@tsparticles/shape-emoji/browser/EmojiDrawer.js","node_modules/@tsparticles/shape-emoji/browser/Utils.js"],"sourcesContent":["import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawEmoji } from \"./Utils.js\";\nimport { validTypes } from \"./Constants.js\";\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"';\nexport class EmojiDrawer {\n    constructor() {\n        this._emojiShapeDict = new Map();\n    }\n    destroy() {\n        for (const [key, emojiData] of this._emojiShapeDict) {\n            if (emojiData instanceof ImageBitmap) {\n                emojiData?.close();\n                this._emojiShapeDict.delete(key);\n            }\n        }\n    }\n    draw(data) {\n        drawEmoji(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            return;\n        }\n        const promises = [loadFont(defaultFont)], shapeOptions = validTypes\n            .map((t) => options.particles.shape.options[t])\n            .find((t) => !!t);\n        if (shapeOptions) {\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                if (shape.font) {\n                    promises.push(loadFont(shape.font));\n                }\n            });\n        }\n        await Promise.all(promises);\n    }\n    particleDestroy(particle) {\n        delete particle.emojiData;\n    }\n    particleInit(container, particle) {\n        const double = 2, shapeData = particle.shapeData;\n        if (!shapeData?.value) {\n            return;\n        }\n        const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData), font = shapeData.font ?? defaultFont;\n        if (!emoji) {\n            return;\n        }\n        const key = `${emoji}_${font}`, existingData = this._emojiShapeDict.get(key);\n        if (existingData) {\n            particle.emojiData = existingData;\n            return;\n        }\n        const canvasSize = getRangeMax(particle.size.value) * double;\n        let emojiData;\n        const maxSize = getRangeMax(particle.size.value);\n        if (typeof OffscreenCanvas !== \"undefined\") {\n            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas.transferToImageBitmap();\n        }\n        else {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = canvasSize;\n            canvas.height = canvasSize;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas;\n        }\n        this._emojiShapeDict.set(key, emojiData);\n        particle.emojiData = emojiData;\n    }\n}\n","export function drawEmoji(data) {\n    const { context, particle, radius, opacity } = data, emojiData = particle.emojiData, double = 2, diameter = radius * double, previousAlpha = context.globalAlpha;\n    if (!emojiData) {\n        return;\n    }\n    context.globalAlpha = opacity;\n    context.drawImage(emojiData, -radius, -radius, diameter, diameter);\n    context.globalAlpha = previousAlpha;\n}\n"],"names":["$i0lBz","parcelRequire","$bf6127aa74705745$var$defaultFont","$bf6127aa74705745$export$54b9bca6f3f7c1c3","constructor","this","_emojiShapeDict","Map","destroy","key","emojiData","ImageBitmap","close","delete","draw","data","$c2vP9","drawEmoji","async","container","options","actualOptions","$QzzFY","validTypes","find","t","isInArray","particles","shape","type","promises","loadFont","shapeOptions","map","executeOnSingleOrMultiple","font","push","Promise","all","particleDestroy","particle","particleInit","shapeData","value","emoji","itemFromSingleOrMultiple","randomIndexData","existingData","get","canvasSize","getRangeMax","size","maxSize","OffscreenCanvas","canvas","context","getContext","textBaseline","textAlign","fillText","transferToImageBitmap","canvas1","document","createElement","width","height","context1","set","$8c3e5b8be8014d47$export$fc441f4f425fe138","radius","opacity","diameter","previousAlpha","globalAlpha","drawImage"],"version":3,"file":"EmojiDrawer.22402f12.js.map"}