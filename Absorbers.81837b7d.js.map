{"mappings":"gUAAA,IAAAA,EAAAC,EAAA,SAEO,MAAMC,EACTC,YAAYC,GACRC,KAAKD,UAAYA,EACjBC,KAAKC,MAAQ,GACbD,KAAKE,UAAY,GACjBF,KAAKG,uBAAyB,GAC9BJ,EAAUK,YAAeC,QAA4BC,IAAdD,IAA2B,EAAAV,EAAAY,UAASF,GACrEL,KAAKC,MAAMI,GARJ,GASPL,KAAKC,MAAMO,MAAMC,GAAMA,EAAEC,OAASL,IACxCN,EAAUY,YAAcC,MAAOC,EAASC,IAAad,KAAKW,YAAYE,EAASC,E,CAEnFF,kBAAkBC,EAASC,GACvB,MAAMC,iBAAEA,SAA2BnB,EAAA,SAAiCoB,EAAW,IAAID,EAAiBf,KAAMA,KAAKD,UAAWc,EAASC,GAEnI,OADAd,KAAKC,MAAMgB,KAAKD,GACTA,C,CAEXE,KAAKC,GACD,IAAK,MAAMH,KAAYhB,KAAKC,MACxBe,EAASE,KAAKC,E,CAGtBC,gBAAgBC,GACZ,MAAMC,EAAkBtB,KAAKE,UAAWqB,EAAgBvB,KAAKG,uBAC7D,GAAa,aAATkB,EAAqB,CACrB,MAAsEG,GAAzC,EAAA7B,EAAA8B,0BAAyBF,KAA2D,EAAA5B,EAAA8B,0BAAyBH,GAAkBI,EAAY1B,KAAKD,UAAU4B,cAAcC,MAAMC,cACtM7B,KAAKW,YAAYa,EAAkBE,E,EAGhDd,aACIZ,KAAKE,UAAYF,KAAKD,UAAU+B,cAAc5B,UAC9CF,KAAKG,uBAAyBH,KAAKD,UAAU+B,cAAcH,cAAcI,MAAM7B,UAC/E,MAAM8B,GAAW,EAAArC,EAAAsC,2BAA0BjC,KAAKE,WAAWU,MAAOI,UACxDhB,KAAKW,YAAYK,EAAS,IAEhCgB,aAAoBE,YACdC,QAAQC,IAAIJ,SAGZA,C,CAGdK,eAAeC,GACX,IAAK,MAAMtB,KAAYhB,KAAKC,MAExB,GADAe,EAASuB,QAAQD,GACbA,EAASE,UACT,K,CAIZC,eAAezB,GACX,MAAM0B,EAAQ1C,KAAKC,MAAM0C,QAAQ3B,GAC7B0B,GApDS,GAqDT1C,KAAKC,MAAM2C,OAAOF,EAFoC,E,CAK9DG,SACI,IAAK,MAAM7B,KAAYhB,KAAKC,MACxBe,EAAS6B,Q,CAGjBC,OACI9C,KAAKC,MAAQ,E,wCC/DrB8C,EAAAC,QAAiBC,OAAoB,KAAOrD,EAAA,SAAAsD,QAA6C,UAAWC,MAAK,IAAMvD,EAAc,U","sources":["node_modules/@tsparticles/plugin-absorbers/browser/Absorbers.js","node_modules/@parcel/runtime-js/lib/runtime-6355533b2abeb49f.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isNumber, itemFromSingleOrMultiple, } from \"@tsparticles/engine\";\nconst defaultIndex = 0;\nexport class Absorbers {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addAbsorber = async (options, position) => this.addAbsorber(options, position);\n    }\n    async addAbsorber(options, position) {\n        const { AbsorberInstance } = await import(\"./AbsorberInstance.js\"), absorber = new AbsorberInstance(this, this.container, options, position);\n        this.array.push(absorber);\n        return absorber;\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            absorber.draw(context);\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === \"absorber\") {\n            const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions), aPosition = this.container.interactivity.mouse.clickPosition;\n            void this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    async init() {\n        this.absorbers = this.container.actualOptions.absorbers;\n        this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;\n        const promises = executeOnSingleOrMultiple(this.absorbers, async (absorber) => {\n            await this.addAbsorber(absorber);\n        });\n        if (promises instanceof Array) {\n            await Promise.all(promises);\n        }\n        else {\n            await promises;\n        }\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber), deleteCount = 1;\n        if (index >= defaultIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"FMLDO\"))).then(() => parcelRequire('bdf2X'));"],"names":["$i0lBz","parcelRequire","$8172605ee1cbd725$export$2f99069530c9fa2a","constructor","container","this","array","absorbers","interactivityAbsorbers","getAbsorber","idxOrName","undefined","isNumber","find","t","name","addAbsorber","async","options","position","AbsorberInstance","absorber","push","draw","context","handleClickMode","mode","absorberOptions","modeAbsorbers","absorbersOptions","itemFromSingleOrMultiple","aPosition","interactivity","mouse","clickPosition","actualOptions","modes","promises","executeOnSingleOrMultiple","Array","Promise","all","particleUpdate","particle","attract","destroyed","removeAbsorber","index","indexOf","splice","resize","stop","module","exports","import","resolve","then"],"version":3,"file":"Absorbers.81837b7d.js.map"}