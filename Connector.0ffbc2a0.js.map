{"mappings":"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","sources":["node_modules/@tsparticles/interaction-external-connect/browser/Connector.js","node_modules/@tsparticles/interaction-external-connect/browser/Utils.js"],"sourcesContent":["import { ExternalInteractorBase, isInArray, } from \"@tsparticles/engine\";\nimport { Connect } from \"./Options/Classes/Connect.js\";\nimport { drawConnection } from \"./Utils.js\";\nconst connectMode = \"connect\", minDistance = 0;\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position, { connectModeDistance, connectModeRadius } = container.retina;\n            if (!connectModeDistance ||\n                connectModeDistance < minDistance ||\n                !connectModeRadius ||\n                connectModeRadius < minDistance ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            query.forEach((p1, i) => {\n                const pos1 = p1.getPosition(), indexOffset = 1;\n                for (const p2 of query.slice(i + indexOffset)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n            });\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(connectMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n","import { clamp, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"@tsparticles/engine\";\nconst gradientMin = 0, gradientMax = 1, defaultLinksWidth = 0;\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(gradientMin, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(clamp(gradStop, gradientMin, gradientMax), getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(gradientMax, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? defaultLinksWidth, ls, pos1, pos2);\n    });\n}\n"],"names":["$i0lBz","parcelRequire","$50d9dbe1d3af2b43$export$b2278035370d6017","ExternalInteractorBase","constructor","container","super","clear","init","this","connect","actualOptions","interactivity","modes","retina","connectModeDistance","distance","pixelRatio","connectModeRadius","radius","interact","events","onHover","enable","status","mousePos","mouse","position","Math","abs","query","particles","quadTree","queryCircle","p","isEnabled","forEach","p1","i","pos1","getPosition","p2","slice","pos2","distMax","xDiff","x","yDiff","y","$elAUT","drawConnection","particle","isInArray","mode","loadModeOptions","options","sources","$3TEcx","Connect","source","load","reset","$a71fa9c0138e4a2a$export$dae7cf860e07354f","ctx","connectOptions","context","opacity","gradStop","floor","getRadius","color1","getFillColor","color2","sourcePos","destPos","midRgb","colorMix","grad","createLinearGradient","addColorStop","getStyleFromHsl","clamp","getStyleFromRgb","$a71fa9c0138e4a2a$export$f7d09cddc76f277f","links","$a71fa9c0138e4a2a$export$7b1cbcf336779304","canvas","draw","ls","width","lineStyle","begin","end","linksWidth","drawLine","lineWidth","strokeStyle","stroke"],"version":3,"file":"Connector.0ffbc2a0.js.map"}