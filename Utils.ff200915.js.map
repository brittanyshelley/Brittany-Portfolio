{"mappings":"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","sources":["node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js","node_modules/@tsparticles/shape-image/browser/GifUtils/Constants.js","node_modules/@tsparticles/shape-image/browser/GifUtils/ByteStream.js"],"sourcesContent":["import { InterlaceOffsets, InterlaceSteps } from \"./Constants.js\";\nimport { ByteStream } from \"./ByteStream.js\";\nconst origin = {\n    x: 0,\n    y: 0,\n}, defaultFrame = 0, half = 0.5, initialTime = 0, firstIndex = 0, defaultLoopCount = 0;\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nfunction parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case 249: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case 255: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case 254: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case 1: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        if (index !== getTransparencyIndex(null)) {\n            return { r, g, b, a: 255 };\n        }\n        return { r, g, b, a: avgAlpha ? ~~((r + g + b) / 3) : 0 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (InterlaceOffsets[pass] < frame.height) {\n                let pixelPos = 0, lineIndex = 0, exit = false;\n                while (!exit) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (const item of dic[code]) {\n                            const { r, g, b, a } = getColor(item);\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\n                                InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            exit = true;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        let code = 0, size = minCodeSize + 1, pos = 0, pixelPos = -4, exit = false;\n        const dic = [[0]];\n        while (!exit) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    exit = true;\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (const item of dic[code]) {\n                    const { r, g, b, a } = getColor(item);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nexport function getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\nexport function drawGif(data) {\n    const { context, radius, particle, delta } = data, image = particle.image;\n    if (!image?.gifData || !image.gif) {\n        return;\n    }\n    const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n    if (!offscreenContext) {\n        throw new Error(\"could not create offscreen canvas context\");\n    }\n    offscreenContext.imageSmoothingQuality = \"low\";\n    offscreenContext.imageSmoothingEnabled = false;\n    offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n    if (particle.gifLoopCount === undefined) {\n        particle.gifLoopCount = image.gifLoopCount ?? defaultLoopCount;\n    }\n    let frameIndex = particle.gifFrame ?? defaultFrame;\n    const pos = { x: -image.gifData.width * half, y: -image.gifData.height * half }, frame = image.gifData.frames[frameIndex];\n    if (particle.gifTime === undefined) {\n        particle.gifTime = initialTime;\n    }\n    if (!frame.bitmap) {\n        return;\n    }\n    context.scale(radius / image.gifData.width, radius / image.gifData.height);\n    switch (frame.disposalMethod) {\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 0:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            break;\n        case 1:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            break;\n        case 2:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            if (!image.gifData.globalColorTable.length) {\n                offscreenContext.putImageData(image.gifData.frames[firstIndex].image, pos.x + frame.left, pos.y + frame.top);\n            }\n            else {\n                offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n            }\n            break;\n        case 3:\n            {\n                const previousImageData = offscreenContext.getImageData(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                context.drawImage(offscreenCanvas, pos.x, pos.y);\n                offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.putImageData(previousImageData, origin.x, origin.y);\n            }\n            break;\n    }\n    particle.gifTime += delta.value;\n    if (particle.gifTime > frame.delayTime) {\n        particle.gifTime -= frame.delayTime;\n        if (++frameIndex >= image.gifData.frames.length) {\n            if (--particle.gifLoopCount <= defaultLoopCount) {\n                return;\n            }\n            frameIndex = firstIndex;\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n        }\n        particle.gifFrame = frameIndex;\n    }\n    context.scale(image.gifData.width / radius, image.gifData.height / radius);\n}\nexport async function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        const { loadImage } = await import(\"../Utils.js\");\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? defaultLoopCount;\n        if (!image.gifLoopCount) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\n","export const InterlaceOffsets = [0, 4, 2, 1];\nexport const InterlaceSteps = [8, 8, 4, 2];\n","export class ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        const increment = 2, previous = 1, shift = 8;\n        this.pos += increment;\n        return this.data[this.pos - increment] + (this.data[this.pos - previous] << shift);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        const minCount = 0, emptySize = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= minCount; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== emptySize);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = this.data[this.pos], len = 0;\n        const emptySize = 0, increment = 1;\n        for (let offset = 0; size !== emptySize; offset += size + increment, size = this.data[this.pos + offset]) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        size = this.data[this.pos++];\n        for (let i = 0; size !== emptySize; size = this.data[this.pos++]) {\n            for (let count = size; --count >= emptySize; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (const increment = 1, noData = 0; this.data[this.pos] !== noData; this.pos += this.data[this.pos] + increment) {\n        }\n        this.pos++;\n    }\n}\n"],"names":["$2skY0","parcelRequire","$823dc46767d07f90$var$origin","$823dc46767d07f90$var$parseColorTable","byteStream","count","colors","i","push","r","data","pos","g","b","async","$823dc46767d07f90$var$parseBlock","gif","avgAlpha","getFrameIndex","getTransparencyIndex","progressCallback","nextByte","frame","frames","left","nextTwoBytes","top","width","height","packedByte","localColorTableFlag","interlacedFlag","sortFlag","reserved","localColorCount","localColorTable","getColor","index","globalColorTable","a","image","ImageData","colorSpace","error","DOMException","name","EvalError","minCodeSize","imageData","readSubBlocksBin","clearCode","readBits","len","bytePos","bitPos","code","size","dic","pass","InterlaceOffsets","pixelPos","lineIndex","exit","last","length","concat","item","set","InterlaceSteps","x","y","bitmap","createImageBitmap","code1","size1","pos1","pixelPos1","exit1","dic1","last1","i1","item1","r1","g1","b1","a1","$823dc46767d07f90$var$parseImageBlock","GCreserved","disposalMethod","userInputDelayFlag","transparencyFlag","delayTime","transparencyIndex","applicationExtension","identifier","getString","authenticationCode","applicationExtensions","comments","readSubBlocks","plainTextData","charSize","foregroundColor","backgroundColor","text","skipSubBlocks","$823dc46767d07f90$var$parseExtensionBlock","$823dc46767d07f90$export$c51fba8f2ab263bd","context","radius","particle","delta","gifData","offscreenCanvas","OffscreenCanvas","offscreenContext","getContext","Error","imageSmoothingQuality","imageSmoothingEnabled","clearRect","undefined","gifLoopCount","frameIndex","gifFrame","gifTime","scale","drawImage","putImageData","backgroundImage","previousImageData","getImageData","value","$823dc46767d07f90$export$745ee5fd99d9f9d8","type","loading","gifURL","res","fetch","ok","status","buffer","arrayBuffer","totalTime","colorRes","pixelAspectRatio","$2sCS3","ByteStream","Uint8ClampedArray","globalColorTableFlag","globalColorCount","backgroundColorIndex","copyWithin","incrementFrameIndex","getframeIndex","increment","newValue","Infinity","message","$823dc46767d07f90$export$242c765bf39e1a4e","source","extension","NaN","$823dc46767d07f90$export$67ac3d66f3062195","loadImage","Promise","resolve","$1c9e75dee32c18ce$export$6e3040decbe42e1","$1c9e75dee32c18ce$export$a6bec62d89063364","$1cac5941fd11894f$export$8130652b8df6235f","constructor","bytes","this","slice","reduce","acc","curr","String","fromCharCode","blockString","offset","blockData","Uint8Array","noData"],"version":3,"file":"Utils.ff200915.js.map"}