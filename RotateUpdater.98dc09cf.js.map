{"mappings":"2UAAA,IAAAA,EAAAC,EAAA,S,aAEA,MAAkBC,EAAH,EAAcC,KAAKC,GAC3B,MAAMC,EACTC,YAAYC,GACRC,KAAKD,UAAYA,C,CAErBE,KAAKC,GACD,MAAMC,EAAgBD,EAASE,QAAQC,OACvC,IAAKF,EACD,OAEJD,EAASG,OAAS,CACdC,OAAQH,EAAcI,UAAUD,OAChCE,OAAO,EAAAhB,EAAAiB,WAAS,EAAAjB,EAAAkB,eAAcP,EAAcK,QAC5CG,IAAK,EACLC,IAAKlB,GAETQ,EAASW,aAAeV,EAAcW,KACtC,IAAIC,EAAkBZ,EAAca,UACpC,GAAwB,WAApBD,EAA8B,CAE9BA,EADcpB,KAAKsB,MAnBhB,GAmBsB,EAAAzB,EAAA0B,cAAkC,EACtB,oBAAsB,W,CAE/D,OAAQH,GACJ,IAAK,oBACL,IAAK,mBACDb,EAASG,OAAOc,OAAS,aACzB,MACJ,IAAK,YACDjB,EAASG,OAAOc,OAAS,aAGjC,MAAMC,EAAkBjB,EAAcI,UAClCa,EAAgBd,SAChBJ,EAASG,OAAOgB,MAjC8B,GAiCX,EAAA7B,EAAAkB,eAAcU,EAAgBC,OACjEnB,EAASG,OAAOiB,UACZ,EAAC9B,EAAAkB,eAAcU,EAAgBG,OAnC4B,IAmCJvB,KAAKD,UAAUyB,OAAOC,aAC5EL,EAAgBM,OACjBxB,EAASG,OAAOiB,WAAY,EAAA9B,EAAA0B,eAGpChB,EAASyB,SAAWzB,EAASG,OAAOG,K,CAExCoB,UAAU1B,GACN,MAAMG,EAASH,EAASE,QAAQC,OAChC,QAAKA,KAGGH,EAAS2B,YAAc3B,EAAS4B,UAAYzB,EAAOE,UAAUD,SAAWD,EAAOS,K,CAE3FiB,YAAY3B,KAAY4B,GACf5B,EAAQC,SACTD,EAAQC,OAAS,IAAI,EAAA4B,EAAAC,SAEzB,IAAK,MAAMC,KAAUH,EACjB5B,EAAQC,OAAO+B,KAAKD,GAAQ9B,O,CAGpCgC,OAAOnC,EAAUoC,GACRtC,KAAK4B,UAAU1B,IAGfA,EAASG,UAGd,EAAAb,EAAA+C,iBAAgBrC,EAAUA,EAASG,QAAQ,EAAO,OAAQiC,GAC1DpC,EAASyB,SAAWzB,EAASG,OAAOG,M,sECnE5C,IAAAhB,EAAAC,EAAA,S,aAEO,MAAM+C,UAAehD,EAAAiD,gBACxB3C,cACI4C,QACA1C,KAAKO,UAAY,IAAI,EAAAoC,EAAAC,iBACrB5C,KAAKgB,UAAY,YACjBhB,KAAKc,MAAO,EACZd,KAAKQ,MAAQ,C,CAEjB4B,KAAKS,GACIA,IAGLH,MAAMN,KAAKS,QACYC,IAAnBD,EAAK7B,YACLhB,KAAKgB,UAAY6B,EAAK7B,WAE1BhB,KAAKO,UAAU6B,KAAKS,EAAKtC,gBACPuC,IAAdD,EAAK/B,OACLd,KAAKc,KAAO+B,EAAK/B,M,+ECpB7B,IAAAtB,EAAAC,EAAA,SACO,MAAMsD,EACTjD,cACIE,KAAKM,QAAS,EACdN,KAAKuB,MAAQ,EACbvB,KAAKqB,MAAQ,EACbrB,KAAK0B,MAAO,C,CAEhBU,KAAKS,GACIA,SAGeC,IAAhBD,EAAKvC,SACLN,KAAKM,OAASuC,EAAKvC,aAEJwC,IAAfD,EAAKtB,QACLvB,KAAKuB,OAAQ,EAAA/B,EAAAwD,eAAcH,EAAKtB,aAEjBuB,IAAfD,EAAKxB,QACLrB,KAAKqB,OAAQ,EAAA7B,EAAAwD,eAAcH,EAAKxB,aAElByB,IAAdD,EAAKnB,OACL1B,KAAK0B,KAAOmB,EAAKnB,M","sources":["node_modules/@tsparticles/updater-rotate/browser/RotateUpdater.js","node_modules/@tsparticles/updater-rotate/browser/Options/Classes/Rotate.js","node_modules/@tsparticles/updater-rotate/browser/Options/Classes/RotateAnimation.js"],"sourcesContent":["import { degToRad, getRandom, getRangeValue, updateAnimation, } from \"@tsparticles/engine\";\nimport { Rotate } from \"./Options/Classes/Rotate.js\";\nconst double = 2, doublePI = Math.PI * double, identity = 1, doublePIDeg = 360;\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: degToRad(getRangeValue(rotateOptions.value)),\n            min: 0,\n            max: doublePI,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * double), minIndex = 0;\n            rotateDirection = index > minIndex ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = identity - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / doublePIDeg) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        if (!particle.rotate) {\n            return;\n        }\n        updateAnimation(particle, particle.rotate, false, \"none\", delta);\n        particle.rotation = particle.rotate.value;\n    }\n}\n","import { ValueWithRandom, } from \"@tsparticles/engine\";\nimport { RotateAnimation } from \"./RotateAnimation.js\";\nexport class Rotate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new RotateAnimation();\n        this.direction = \"clockwise\";\n        this.path = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.animation.load(data.animation);\n        if (data.path !== undefined) {\n            this.path = data.path;\n        }\n    }\n}\n","import { setRangeValue } from \"@tsparticles/engine\";\nexport class RotateAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n"],"names":["$i0lBz","parcelRequire","$57f5c898002d7459$var$doublePI","Math","PI","$57f5c898002d7459$export$3b9356b2fa15ee9f","constructor","container","this","init","particle","rotateOptions","options","rotate","enable","animation","value","degToRad","getRangeValue","min","max","pathRotation","path","rotateDirection","direction","floor","getRandom","status","rotateAnimation","decay","velocity","speed","retina","reduceFactor","sync","rotation","isEnabled","destroyed","spawning","loadOptions","sources","$234za","Rotate","source","load","update","delta","updateAnimation","$17df675b4f8424f6$export$152db69a76b6b79e","ValueWithRandom","super","$gGC2z","RotateAnimation","data","undefined","$c25e13a2a80613a5$export$cdf8682ab8a5e20a","setRangeValue"],"version":3,"file":"RotateUpdater.98dc09cf.js.map"}