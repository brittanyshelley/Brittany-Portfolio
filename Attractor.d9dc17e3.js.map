{"mappings":"uUAAA,IAAAA,EAAAC,EAAA,S,0BAGA,MAAMC,EAAc,UACb,MAAMC,UAAkBH,EAAAI,uBAC3BC,YAAYC,EAAQC,GAChBC,MAAMD,GACNE,KAAKC,QAAUJ,EACVC,EAAUI,UACXJ,EAAUI,QAAU,CAAEC,UAAW,KAErCH,KAAKI,gBAAmBC,IACpB,MAA8CH,EAA9BF,KAAKF,UAAUQ,cAAiCC,cAAcC,MAAMN,QACpF,GAAKA,GAAWG,IAASZ,EAAzB,CAGKK,EAAUI,UACXJ,EAAUI,QAAU,CAAEC,UAAW,KAErCL,EAAUI,QAAQO,UAAW,EAC7BX,EAAUI,QAAQQ,MAAQ,EAC1B,IAAK,MAAMC,KAAYb,EAAUI,QAAQC,UAChCH,KAAKY,UAAUD,IAGpBA,EAASE,SAASC,MAAMH,EAASI,iBAErCjB,EAAUI,QAAQC,UAAY,GAC9BL,EAAUI,QAAQc,QAAS,EAC3BC,YAAW,KACHnB,EAAUoB,YAGTpB,EAAUI,UACXJ,EAAUI,QAAU,CAAEC,UAAW,KAErCL,EAAUI,QAAQO,UAAW,EAAK,GACnCP,EAAQiB,SAAW5B,EAAA6B,sBAvBlB,CAuBwC,C,CAGpDC,QAAQ,CAERC,OACI,MAAMxB,EAAYE,KAAKF,UAAWI,EAAUJ,EAAUQ,cAAcC,cAAcC,MAAMN,QACnFA,IAGLJ,EAAUyB,OAAOC,oBAAsBtB,EAAQuB,SAAW3B,EAAUyB,OAAOG,W,CAE/EC,WACI,MAAM7B,EAAYE,KAAKF,UAAW8B,EAAU9B,EAAUQ,cAAeuB,EAAkB/B,EAAUS,cAAcuB,SAAWvC,EAAAwC,eAAgBC,EAASJ,EAAQrB,cAAcyB,QAAUC,OAAQC,EAAc7B,KAAM8B,GAAcH,EAAOI,SAAWH,OAAQI,EAAchC,KAAMiC,GAAcN,EAAOO,QAC5RV,GAAmBK,IAAgB,EAAA3C,EAAAiD,WAAU/C,EAAa0C,IAC1D,EAAAM,EAAAC,cAAa1C,KAAKF,WAAY6C,GAAM3C,KAAKY,UAAU+B,KAE9CN,IAAgB,EAAA9C,EAAAiD,WAAU/C,EAAa6C,KAC5C,EAAAG,EAAAG,cAAa5C,KAAKF,WAAY6C,GAAM3C,KAAKY,UAAU+B,I,CAG3D/B,UAAUD,GACN,MAAMb,EAAYE,KAAKF,UAAW8B,EAAU9B,EAAUQ,cAAeuC,EAAQ/C,EAAUS,cAAcsC,MAAOb,GAAUrB,GAAUJ,eAAiBqB,EAAQrB,eAAeyB,OACxK,KAAMa,EAAMC,UAAad,EAAOI,QAAQH,QAAaY,EAAME,eAAkBf,EAAOO,QAAQN,QACxF,OAAO,EAEX,MAAME,EAAYH,EAAOI,QAAQ/B,KAAMiC,EAAYN,EAAOO,QAAQlC,KAClE,OAAO,EAAAd,EAAAiD,WAAU/C,EAAa0C,KAAc,EAAA5C,EAAAiD,WAAU/C,EAAa6C,E,CAEvEU,gBAAgBpB,KAAYqB,GACnBrB,EAAQ1B,UACT0B,EAAQ1B,QAAU,IAAI,EAAAgD,EAAAC,UAE1B,IAAK,MAAMC,KAAUH,EACjBrB,EAAQ1B,QAAQmD,KAAKD,GAAQlD,Q,CAGrCoD,QAAQ,E,8GC1EZ,IAAA/D,EAAAC,EAAA,SAEA,SAAS+D,EAAezD,EAAWgD,EAAUU,EAAeC,EAAMC,GAC9D,MAAMC,EAAiB7D,EAAUQ,cAAcC,cAAcC,MAAMN,QACnE,IAAKyD,EACD,OAEJ,MAAMC,EAAQ9D,EAAUK,UAAU0D,SAASD,MAAMH,EAAMC,GACvD,IAAK,MAAM/C,KAAYiD,EAAO,CAC1B,MAAME,GAAEA,EAAEC,GAAEA,EAAEtC,SAAEA,IAAa,EAAAlC,EAAAyE,cAAarD,EAASmC,SAAUA,GAAWjC,EAAW8C,EAAeM,MAAQN,EAAeO,OAAQC,GAAgB,EAAA5E,EAAA6E,QAAM,EAAA7E,EAAA8E,WAAUV,EAAeW,OAAzB,CAR/H,EAQ2K7C,EAAW+B,GAAiB3C,EARrN,EAQ0O8C,EAAeY,UAAWC,EAAUjF,EAAAkF,OAAOC,OAAQjD,EAAsBqC,EAAMrC,EAAY0C,EAA7BtD,EAA6CY,EAAsBsC,EAAMtC,EAAY0C,EAA7BtD,GAC1WF,EAASmC,SAAS6B,QAAQH,E,EAG3B,SAASI,EAAa9E,EAAW+E,GAC/B/E,EAAUI,UACXJ,EAAUI,QAAU,CAAEC,UAAW,KAErC,MAAMD,QAAEA,GAAYJ,EAUpB,GATKI,EAAQc,SACJd,EAAQQ,QACTR,EAAQQ,MAAQ,GAEpBR,EAAQQ,QACJR,EAAQQ,QAAUZ,EAAUK,UAAUO,QACtCR,EAAQc,QAAS,IAGrBd,EAAQO,SAAU,CAClB,MAAMqE,EAAWhF,EAAUS,cAAcsC,MAAME,cAAeS,EAAgB1D,EAAUyB,OAAOC,oBAC/F,IAAKgC,GAAiBA,EA5BiB,IA4BasB,EAChD,OAEJvB,EAAezD,EAAWgF,EAAUtB,EAAe,IAAI,EAAAjE,EAAAwF,QAAOD,EAASE,EAAGF,EAASG,EAAGzB,IAAiBb,GAAMkC,EAAUlC,I,MAE7F,IAArBzC,EAAQO,WACbP,EAAQC,UAAY,G,CAGrB,SAAS+E,EAAapF,EAAW+E,GACpC,MAAMC,EAAWhF,EAAUS,cAAcsC,MAAMC,SAAUU,EAAgB1D,EAAUyB,OAAOC,qBACrFgC,GAAiBA,EAvCqB,IAuCSsB,GAGpDvB,EAAezD,EAAWgF,EAAUtB,EAAe,IAAI,EAAAjE,EAAAwF,QAAOD,EAASE,EAAGF,EAASG,EAAGzB,IAAiBb,GAAMkC,EAAUlC,I","sources":["node_modules/@tsparticles/interaction-external-attract/browser/Attractor.js","node_modules/@tsparticles/interaction-external-attract/browser/Utils.js"],"sourcesContent":["import { ExternalInteractorBase, isInArray, millisecondsToSeconds, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { clickAttract, hoverAttract } from \"./Utils.js\";\nimport { Attract } from \"./Options/Classes/Attract.js\";\nconst attractMode = \"attract\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== attractMode) {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                if (!container.attract) {\n                    container.attract = { particles: [] };\n                }\n                container.attract.clicking = false;\n            }, attract.duration * millisecondsToSeconds);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, { enable: hoverEnabled, mode: hoverMode } = events.onHover, { enable: clickEnabled, mode: clickMode } = events.onClick;\n        if (mouseMoveStatus && hoverEnabled && isInArray(attractMode, hoverMode)) {\n            hoverAttract(this.container, (p) => this.isEnabled(p));\n        }\n        else if (clickEnabled && isInArray(attractMode, clickMode)) {\n            clickAttract(this.container, (p) => this.isEnabled(p));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(attractMode, hoverMode) || isInArray(attractMode, clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source?.attract);\n        }\n    }\n    reset() {\n    }\n}\n","import { Circle, Vector, clamp, getDistances, getEasing, } from \"@tsparticles/engine\";\nconst minFactor = 1, identity = 1, minRadius = 0;\nfunction processAttract(container, position, attractRadius, area, queryCb) {\n    const attractOptions = container.actualOptions.interactivity.modes.attract;\n    if (!attractOptions) {\n        return;\n    }\n    const query = container.particles.quadTree.query(area, queryCb);\n    for (const particle of query) {\n        const { dx, dy, distance } = getDistances(particle.position, position), velocity = attractOptions.speed * attractOptions.factor, attractFactor = clamp(getEasing(attractOptions.easing)(identity - distance / attractRadius) * velocity, minFactor, attractOptions.maxSpeed), normVec = Vector.create(!distance ? velocity : (dx / distance) * attractFactor, !distance ? velocity : (dy / distance) * attractFactor);\n        particle.position.subFrom(normVec);\n    }\n}\nexport function clickAttract(container, enabledCb) {\n    if (!container.attract) {\n        container.attract = { particles: [] };\n    }\n    const { attract } = container;\n    if (!attract.finish) {\n        if (!attract.count) {\n            attract.count = 0;\n        }\n        attract.count++;\n        if (attract.count === container.particles.count) {\n            attract.finish = true;\n        }\n    }\n    if (attract.clicking) {\n        const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n        if (!attractRadius || attractRadius < minRadius || !mousePos) {\n            return;\n        }\n        processAttract(container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n    }\n    else if (attract.clicking === false) {\n        attract.particles = [];\n    }\n}\nexport function hoverAttract(container, enabledCb) {\n    const mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n    if (!attractRadius || attractRadius < minRadius || !mousePos) {\n        return;\n    }\n    processAttract(container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n}\n"],"names":["$i0lBz","parcelRequire","$43070ecbc40361b0$var$attractMode","$43070ecbc40361b0$export$27a51cca6e7ea831","ExternalInteractorBase","constructor","engine","container","super","this","_engine","attract","particles","handleClickMode","mode","actualOptions","interactivity","modes","clicking","count","particle","isEnabled","velocity","setTo","initialVelocity","finish","setTimeout","destroyed","duration","millisecondsToSeconds","clear","init","retina","attractModeDistance","distance","pixelRatio","interact","options","mouseMoveStatus","status","mouseMoveEvent","events","enable","hoverEnabled","hoverMode","onHover","clickEnabled","clickMode","onClick","isInArray","$72W2L","hoverAttract","p","clickAttract","mouse","position","clickPosition","loadModeOptions","sources","$9NoRR","Attract","source","load","reset","$5215be89f79a7cb1$var$processAttract","attractRadius","area","queryCb","attractOptions","query","quadTree","dx","dy","getDistances","speed","factor","attractFactor","clamp","getEasing","easing","maxSpeed","normVec","Vector","create","subFrom","$5215be89f79a7cb1$export$394d6bb309b28144","enabledCb","mousePos","Circle","x","y","$5215be89f79a7cb1$export$a5508b998f0bbea0"],"version":3,"file":"Attractor.d9dc17e3.js.map"}