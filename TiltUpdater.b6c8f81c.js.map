{"mappings":"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","sources":["node_modules/@tsparticles/updater-tilt/browser/TiltUpdater.js","node_modules/@tsparticles/updater-tilt/browser/Options/Classes/Tilt.js","node_modules/@tsparticles/updater-tilt/browser/Options/Classes/TiltAnimation.js"],"sourcesContent":["import { degToRad, getRandom, getRangeValue, halfRandom, updateAnimation, } from \"@tsparticles/engine\";\nimport { Tilt } from \"./Options/Classes/Tilt.js\";\nconst identity = 1, double = 2, doublePI = Math.PI * double, maxAngle = 360;\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        const tilt = particle.tilt?.enable && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: degToRad(getRangeValue(tiltOptions.value)),\n            sinDirection: getRandom() >= halfRandom ? identity : -identity,\n            cosDirection: getRandom() >= halfRandom ? identity : -identity,\n            min: 0,\n            max: doublePI,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === \"random\") {\n            const index = Math.floor(getRandom() * double), minIndex = 0;\n            tiltDirection = index > minIndex ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (tiltDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.tilt.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.tilt.status = \"increasing\";\n                break;\n        }\n        const tiltAnimation = particle.options.tilt?.animation;\n        if (tiltAnimation?.enable) {\n            particle.tilt.decay = identity - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity =\n                (getRangeValue(tiltAnimation.speed) / maxAngle) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const tiltAnimation = particle.options.tilt?.animation;\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source?.tilt);\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.tilt) {\n            return;\n        }\n        updateAnimation(particle, particle.tilt, false, \"none\", delta);\n        await Promise.resolve();\n    }\n}\n","import { ValueWithRandom } from \"@tsparticles/engine\";\nimport { TiltAnimation } from \"./TiltAnimation.js\";\nexport class Tilt extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new TiltAnimation();\n        this.direction = \"clockwise\";\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.animation.load(data.animation);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n","import { setRangeValue } from \"@tsparticles/engine\";\nexport class TiltAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n"],"names":["$i0lBz","parcelRequire","$fa589065eb974e43$var$doublePI","Math","PI","$fa589065eb974e43$export$bf10918add78aca9","constructor","container","this","getTransformValues","particle","tilt","enable","b","cos","value","cosDirection","undefined","c","sin","sinDirection","init","tiltOptions","options","degToRad","getRangeValue","getRandom","halfRandom","min","max","tiltDirection","direction","floor","status","tiltAnimation","animation","decay","velocity","speed","retina","reduceFactor","sync","isEnabled","destroyed","spawning","loadOptions","sources","$ilPA3","Tilt","source","load","async","delta","updateAnimation","Promise","resolve","$d5c232fe74b78b6f$export$7f9fd97e8e8ffd03","ValueWithRandom","super","$cKrHX","TiltAnimation","data","$947f4621a5a0b232$export$e573f4ca73db5908","setRangeValue"],"version":3,"file":"TiltUpdater.b6c8f81c.js.map"}