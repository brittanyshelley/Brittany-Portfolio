{"mappings":"qUAAA,IAAAA,EAAAC,EAAA,S,0BAIO,MAAMC,UAAgBF,EAAAG,uBACzBC,YAAYC,GACRC,MAAMD,E,CAEVE,QAAQ,CAERC,OACI,MAAMH,EAAYI,KAAKJ,UAAWK,EAAOL,EAAUM,cAAcC,cAAcC,MAAMH,KAChFA,IAGLL,EAAUS,OAAOC,iBAAmBL,EAAKM,SAAWX,EAAUS,OAAOG,W,CAEzEC,WACI,MAAMb,EAAYI,KAAKJ,UAA8CO,EAAzBP,EAAUM,cAAuCC,cAC7F,IAAKA,EAAcC,MAAMH,OACpBE,EAAcO,OAAOC,QAAQC,QAC9BhB,EAAUO,cAAcU,SAAWtB,EAAAuB,eACnC,OAEJ,MAAMC,EAAWnB,EAAUO,cAAca,MAAMC,SAC/C,IAAKF,EACD,OAEJ,MAAMR,EAAWX,EAAUS,OAAOC,iBAClC,IAAKC,GAAYA,EA1Bc,EA2B3B,OAEJ,MAAMW,EAAQtB,EAAUuB,UAAUC,SAASC,YAAYN,EAAUR,GAAWe,GAAMtB,KAAKuB,UAAUD,KACjG,IAAK,MAAME,KAAYN,EAAO,CAC1B,MAAMO,EAAMD,EAASE,cAAeC,GAAgB,EAAApC,EAAAqC,aAAYH,EAAKV,GACrE,GAAIY,EAAgBpB,EAChB,SAEJ,MAAMsB,EAAkB1B,EAAcC,MAAMH,KAAK6B,MAAOC,EAAcF,EAAgBG,QAASC,EAAcF,EAAcJ,EAAiBI,EAAexB,EAC3J,GAAI0B,GApCuC,EAqCvC,SAEJ,MAAMC,EAAWL,EAAgBM,OAASX,EAASY,QAAQN,OAAOK,MAClE,IAAKvC,EAAUuB,UAAUkB,eAAiBH,EAAU,CAChD,MAAMI,EAAenC,EAAcC,MAAMH,KAAK6B,MAC9ClC,EAAUuB,UAAUkB,eAAgB,EAAA9C,EAAAgD,oBAAmBL,EAAUI,EAAaE,MAAOF,EAAaG,Q,CAEtG,MAAMC,GAAY,EAAAnD,EAAAoD,cAAanB,OAAUoB,EAAWhD,EAAUuB,UAAUkB,eACnEK,IAGL,EAAAG,EAAAC,UAASlD,EAAW4B,EAAUkB,EAAWT,EAAalB,E,EAG9DQ,UAAUC,GACN,MAAM5B,EAAYI,KAAKJ,UAAWoB,EAAQpB,EAAUO,cAAca,MAAON,GAAUc,GAAUrB,eAAiBP,EAAUM,cAAcC,eAAeO,OACrJ,OAAOA,EAAOC,QAAQC,UAAYI,EAAMC,WAAY,EAAA1B,EAAAwD,WArD3C,OAqD+DrC,EAAOC,QAAQqC,K,CAE3FC,gBAAgBb,KAAYc,GACnBd,EAAQnC,OACTmC,EAAQnC,KAAO,IAAI,EAAAkD,EAAAC,OAEvB,IAAK,MAAMC,KAAUH,EACjBd,EAAQnC,KAAKqD,KAAKD,GAAQpD,K,CAGlCsD,QAAQ,E,sEClEZ,IAAAhE,EAAAC,EAAA,SAQO,SAASgE,EAAS5D,EAAW4B,EAAUiC,EAAWzB,EAASjB,GAC9DnB,EAAU8D,OAAOC,MAAMC,IACnB,MAAMC,EAAWrC,EAASE,eAR3B,SAAsBoC,EAASC,EAAOC,EAAOC,EAAKvB,EAAWV,IAChE,EAAAzC,EAAA2E,UAASJ,EAASE,EAAOC,GACzBH,EAAQK,aAAc,EAAA5E,EAAA6E,iBAAgB1B,EAAWV,GACjD8B,EAAQO,UAAYN,EACpBD,EAAQQ,Q,CAKJC,CAAaX,EAAKpC,EAASnB,OAAOmE,YAVrB,EAUiDX,EAAU9C,EAAU0C,EAAWzB,EAAQ,G","sources":["node_modules/@tsparticles/interaction-external-grab/browser/Grabber.js","node_modules/@tsparticles/interaction-external-grab/browser/Utils.js"],"sourcesContent":["import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { Grab } from \"./Options/Classes/Grab.js\";\nimport { drawGrab } from \"./Utils.js\";\nconst grabMode = \"grab\", minDistance = 0, minOpacity = 0;\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < minDistance) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= minOpacity) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(grabMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n","import { drawLine, getStyleFromRgb } from \"@tsparticles/engine\";\nconst defaultWidth = 0;\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nexport function drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw((ctx) => {\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, particle.retina.linksWidth ?? defaultWidth, beginPos, mousePos, lineColor, opacity);\n    });\n}\n"],"names":["$i0lBz","parcelRequire","$df8b2a937090a53c$export$b1641bf46f4bbeac","ExternalInteractorBase","constructor","container","super","clear","init","this","grab","actualOptions","interactivity","modes","retina","grabModeDistance","distance","pixelRatio","interact","events","onHover","enable","status","mouseMoveEvent","mousePos","mouse","position","query","particles","quadTree","queryCircle","p","isEnabled","particle","pos","getPosition","pointDistance","getDistance","grabLineOptions","links","lineOpacity","opacity","opacityLine","optColor","color","options","grabLineColor","linksOptions","getLinkRandomColor","blink","consent","colorLine","getLinkColor","undefined","$4sZCR","drawGrab","isInArray","mode","loadModeOptions","sources","$aUMyy","Grab","source","load","reset","$340994917a5d5abf$export$62755b116b3b3e8","lineColor","canvas","draw","ctx","beginPos","context","width","begin","end","drawLine","strokeStyle","getStyleFromRgb","lineWidth","stroke","$340994917a5d5abf$export$d5ea4ac1cc26adad","linksWidth"],"version":3,"file":"Grabber.57f1760a.js.map"}