{"mappings":"0VAAA,IAAAA,EAAAC,EAAA,SACO,MAAMC,EACTC,SAASC,EAAUC,EAAMC,EAAMC,GAC3B,OAAO,IAAI,EAAAP,EAAAQ,qBAAoBJ,EAAUC,EAAMC,EAAMC,E,mFCH7D,IAAAE,EAAAR,EAAA,S,aAEA,MAAMS,EAAU,IAAkBC,EAAH,EAAcC,KAAKC,GAC3C,MAAMC,UAA4BL,EAAAM,iBACrCC,YAAYZ,EAAUC,EAAMC,EAAMC,GAC9BU,MAAMb,EAAUC,EAAMC,EAAMC,E,CAEhCW,aAAa,CAEbC,iBACI,MAAMd,EAAOe,KAAKf,KAAMC,EAAOc,KAAKd,KAAMF,EAAWgB,KAAKhB,UAckEiB,EAAGC,GAAK,CAtBvD,GAsBwDjB,EAAKkB,MAtB7D,GAsB2ElB,EAAKmB,QAAgBC,EAdzF,EAACC,EAAGC,KACpF,MAAMC,GAAI,EAAAC,EAAAC,aAAcpB,EAASqB,EAAQnB,KAAKoB,KAAKL,EAAKD,EAAKd,KAAKqB,IAAItB,EAAWiB,IAAKM,GAAI,EAAAL,EAAAC,aAC1F,OAAII,EAAIxB,EACGqB,EAEFG,EAAIC,GACFvB,KAAKC,GAAKkB,EAEZG,EAAIC,IACFvB,KAAKC,GAAKkB,GAGTA,CAAK,EAEsKK,CAAcf,EAAGC,GAAIe,GAA7LN,EAAsNN,GAA5NC,EAAsNL,IAAnNM,EAAsNL,GAA/LV,KAAK0B,MAAMX,EAAIf,KAAK2B,IAAIR,KAtBI,GAsBoBL,EAAId,KAAK4B,IAAIT,KAtBjC,IAsBoLU,EAAenC,EAAO+B,EAAYzB,KAAK0B,MAAK,EAAAT,EAAAC,cAAeO,EAAtS,IAACX,EAAGC,EAAGI,EACnB,MAAO,CACH3B,SAAU,CACNsB,EAAGtB,EAASsB,EAAIe,EAAe7B,KAAK2B,IAAId,GACxCE,EAAGvB,EAASuB,EAAIc,EAAe7B,KAAK4B,IAAIf,I","sources":["node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js","node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js"],"sourcesContent":["import { EmittersCircleShape } from \"./EmittersCircleShape.js\";\nexport class EmittersCircleShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersCircleShape(position, size, fill, options);\n    }\n}\n","import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom } from \"@tsparticles/engine\";\nconst quarter = 0.25, double = 2, doublePI = Math.PI * double, squareExp = 2, half = 0.5;\nexport class EmittersCircleShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {\n            const u = getRandom() * quarter, theta = Math.atan((y / x) * Math.tan(doublePI * u)), v = getRandom();\n            if (v < quarter) {\n                return theta;\n            }\n            else if (v < double * quarter) {\n                return Math.PI - theta;\n            }\n            else if (v < double * quarter + quarter) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** squareExp + (x * Math.sin(theta)) ** squareExp), [a, b] = [size.width * half, size.height * half], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            position: {\n                x: position.x + randomRadius * Math.cos(randomTheta),\n                y: position.y + randomRadius * Math.sin(randomTheta),\n            },\n        };\n    }\n}\n"],"names":["$cHzS4","parcelRequire","$ed22ac268a213ee2$export$3b500d6539e73c36","generate","position","size","fill","options","EmittersCircleShape","$cg8Ru","$93f5536dabd030d3$var$quarter","$93f5536dabd030d3$var$doublePI","Math","PI","$93f5536dabd030d3$export$d88e33f587fbac6e","EmitterShapeBase","constructor","super","async","randomPosition","this","a","b","width","height","randomTheta","x","y","u","$i0lBz","getRandom","theta","atan","tan","v","$93f5536dabd030d3$var$double","generateTheta","maxRadius","sqrt","cos","sin","randomRadius"],"version":3,"file":"EmittersCircleShapeGenerator.f69b9354.js.map"}