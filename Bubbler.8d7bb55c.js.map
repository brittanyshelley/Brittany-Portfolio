{"mappings":"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","sources":["node_modules/@tsparticles/interaction-external-bubble/browser/Bubbler.js","node_modules/@tsparticles/interaction-external-bubble/browser/Utils.js"],"sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, millisecondsToSeconds, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"@tsparticles/engine\";\nimport { Bubble } from \"./Options/Classes/Bubble.js\";\nimport { calculateBubbleValue } from \"./Utils.js\";\nconst bubbleMode = \"bubble\", minDistance = 0, defaultClickTime = 0, double = 2, defaultOpacity = 1, ratioOffset = 1, defaultBubbleValue = 0, minRatio = 0, half = 0.5, defaultRatio = 1;\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime ?? defaultClickTime)) /\n                    millisecondsToSeconds;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * double) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: \"size\",\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? defaultOpacity,\n                    },\n                    type: \"opacity\",\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance || !mousePos) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = ratioOffset - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= minRatio && container.interactivity.status === mouseMoveEvent) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === mouseLeaveEvent) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\n                particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, ratioOffset - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? defaultOpacity, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value ?? defaultBubbleValue, type = data.type;\n            if (!bubbleDistance || bubbleDistance < minDistance || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === \"size\") {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === \"opacity\") {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, defaultRatio, divBubble);\n                    this._hoverBubbleOpacity(particle, defaultRatio, divBubble);\n                    this._hoverBubbleColor(particle, defaultRatio, divBubble);\n                }\n            });\n        };\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== bubbleMode) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(bubbleMode, hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && isInArray(bubbleMode, clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            divModeExecute(bubbleMode, divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(bubbleMode, onDiv);\n        if (!(divBubble || (onHover.enable && !!mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return isInArray(bubbleMode, onHover.mode) || isInArray(bubbleMode, onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n","import { clamp } from \"@tsparticles/engine\";\nexport function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\n"],"names":["$i0lBz","parcelRequire","$d922b59e5760f608$var$bubbleMode","$d922b59e5760f608$export$6430b7804bc9fbe5","ExternalInteractorBase","constructor","container","super","this","_clickBubble","options","actualOptions","mouseClickPos","interactivity","mouse","clickPosition","bubbleOptions","modes","bubble","distance","retina","bubbleModeDistance","query","particles","quadTree","queryCircle","p","isEnabled","particle","clicking","inRange","durationEnd","pos","getPosition","distMouse","getDistance","timeSpent","Date","getTime","clickTime","millisecondsToSeconds","duration","sizeData","bubbleObj","optValue","bubbleModeSize","value","radius","particlesObj","getRangeMax","size","pixelRatio","type","_process","opacityData","opacity","_hoverBubbleColor","color","_hoverBubble","mousePos","position","pointDistance","ratio","status","mouseMoveEvent","_hoverBubbleSize","_hoverBubbleOpacity","reset","mouseLeaveEvent","divBubble","finalColor","modeColor","bubbleColor","itemFromSingleOrMultiple","rangeColorToHsl","mix","undefined","pColor","getFillColor","rgbToHsl","colorMix","modeOpacity","optOpacity","pOpacity","$2D8Ht","calculateBubbleValue","modeSize","optSize","pSize","data","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","_singleSelectorHover","delta","selector","div","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","Circle","Rectangle","contains","divs","divMode","clear","handleClickMode","mode","force","init","interact","events","onHover","onClick","hoverEnabled","enable","hoverMode","clickEnabled","clickMode","onDiv","isInArray","divModeExecute","isDivModeEnabled","loadModeOptions","sources","$7EJzR","Bubble","source","load","$1ea5f8f84b211ea3$export$144231fdd3795a95","particleValue","modeValue","optionsValue","clamp","value1"],"version":3,"file":"Bubbler.8d7bb55c.js.map"}