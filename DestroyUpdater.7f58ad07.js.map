{"mappings":"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","sources":["node_modules/@tsparticles/updater-destroy/browser/DestroyUpdater.js","node_modules/@tsparticles/updater-destroy/browser/Options/Classes/Destroy.js","node_modules/@tsparticles/updater-destroy/browser/Options/Classes/DestroyBounds.js","node_modules/@tsparticles/updater-destroy/browser/Options/Classes/Split.js","node_modules/@tsparticles/updater-destroy/browser/Options/Classes/SplitFactor.js","node_modules/@tsparticles/updater-destroy/browser/Options/Classes/SplitRate.js","node_modules/@tsparticles/updater-destroy/browser/Utils.js"],"sourcesContent":["import { getRangeValue, percentDenominator, } from \"@tsparticles/engine\";\nimport { Destroy } from \"./Options/Classes/Destroy.js\";\nimport { split } from \"./Utils.js\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.container = container;\n        this.engine = engine;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBoundsOptions = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        const { bottom, left, right, top } = destroyBoundsOptions, { destroyBounds } = particle, canvasSize = container.canvas.size;\n        if (bottom) {\n            destroyBounds.bottom = (getRangeValue(bottom) * canvasSize.height) / percentDenominator;\n        }\n        if (left) {\n            destroyBounds.left = (getRangeValue(left) * canvasSize.width) / percentDenominator;\n        }\n        if (right) {\n            destroyBounds.right = (getRangeValue(right) * canvasSize.width) / percentDenominator;\n        }\n        if (top) {\n            destroyBounds.top = (getRangeValue(top) * canvasSize.height) / percentDenominator;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source?.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === \"split\") {\n            split(this.engine, this.container, particle);\n        }\n    }\n    update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n    }\n}\n","import { DestroyBounds } from \"./DestroyBounds.js\";\nimport { Split } from \"./Split.js\";\nexport class Destroy {\n    constructor() {\n        this.bounds = new DestroyBounds();\n        this.mode = \"none\";\n        this.split = new Split();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.mode) {\n            this.mode = data.mode;\n        }\n        if (data.bounds) {\n            this.bounds.load(data.bounds);\n        }\n        this.split.load(data.split);\n    }\n}\n","import { setRangeValue } from \"@tsparticles/engine\";\nexport class DestroyBounds {\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.bottom !== undefined) {\n            this.bottom = setRangeValue(data.bottom);\n        }\n        if (data.left !== undefined) {\n            this.left = setRangeValue(data.left);\n        }\n        if (data.right !== undefined) {\n            this.right = setRangeValue(data.right);\n        }\n        if (data.top !== undefined) {\n            this.top = setRangeValue(data.top);\n        }\n    }\n}\n","import { OptionsColor, deepExtend, executeOnSingleOrMultiple, } from \"@tsparticles/engine\";\nimport { SplitFactor } from \"./SplitFactor.js\";\nimport { SplitRate } from \"./SplitRate.js\";\nexport class Split {\n    constructor() {\n        this.count = 1;\n        this.factor = new SplitFactor();\n        this.rate = new SplitRate();\n        this.sizeOffset = true;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.factor.load(data.factor);\n        this.rate.load(data.rate);\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        if (data.sizeOffset !== undefined) {\n            this.sizeOffset = data.sizeOffset;\n        }\n        if (data.colorOffset) {\n            this.colorOffset = this.colorOffset ?? {};\n            if (data.colorOffset.h !== undefined) {\n                this.colorOffset.h = data.colorOffset.h;\n            }\n            if (data.colorOffset.s !== undefined) {\n                this.colorOffset.s = data.colorOffset.s;\n            }\n            if (data.colorOffset.l !== undefined) {\n                this.colorOffset.l = data.colorOffset.l;\n            }\n        }\n    }\n}\n","import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitFactor extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = 3;\n    }\n}\n","import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitRate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = { min: 4, max: 9 };\n    }\n}\n","import { getRangeValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst defaultOffset = 0, minDestroySize = 0.5, defaultSplitCount = 0, increment = 1, unbreakableTime = 500, minSplitCount = 0;\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getRangeValue(splitOptions.factor.value), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? defaultOffset),\n                    s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? defaultOffset),\n                    l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? defaultOffset),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: \"precise\",\n        },\n    });\n    if (isNumber(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : defaultOffset, position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < minDestroySize) {\n            return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? defaultSplitCount) + increment;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, unbreakableTime);\n        return true;\n    });\n}\nexport function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= minSplitCount &&\n        (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = getRangeValue(splitOptions.rate.value), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n"],"names":["$i0lBz","parcelRequire","$25f6c0a14ec506ae$export$fbfd6049edb6af01","constructor","engine","container","this","init","particle","destroyOptions","options","destroy","splitCount","destroyBoundsOptions","bounds","destroyBounds","bottom","left","right","top","canvasSize","canvas","size","getRangeValue","height","percentDenominator","width","isEnabled","destroyed","loadOptions","sources","$lErJz","Destroy","source","load","particleDestroyed","override","mode","$1o7M1","split","update","position","getPosition","undefined","y","x","$3Y5HW","$fc32d8d02752298d$export$a52d062350622d8e","DestroyBounds","$evs3U","Split","data","$2e3b6727d111885b$export$42db82a3e81a236","setRangeValue","$a8f9ba795abb9bd4$export$f836382419f64c98","count","factor","$jYZIQ","SplitFactor","rate","$bm37k","SplitRate","sizeOffset","color","OptionsColor","create","particles","executeOnSingleOrMultiple","deepExtend","colorOffset","h","s","l","$e8c37fb0870c90a9$export$f60d70cc94b5f20b","ValueWithRandom","super","value","$84442ac8111e7691$export$fb3eed84de2555ae","min","max","$102e10005777cb52$var$addSplitParticle","parent","splitParticlesOptions","splitOptions","loadParticlesOptions","parentColor","getFillColor","hsl","move","center","isNumber","offset","randomInRange","addParticle","group","velocity","length","unbreakable","setTimeout","$102e10005777cb52$export$65980d18b75784e2","particlesSplitOptions","itemFromSingleOrMultiple","i"],"version":3,"file":"DestroyUpdater.7f58ad07.js.map"}