{"mappings":"2UAAA,IAAAA,EAAAC,EAAA,S,0BAGA,MAAkBC,EAAH,EAAcC,KAAKC,GAC3B,MAAMC,EACTC,YAAYC,GACRC,KAAKD,UAAYA,C,CAErBE,KAAKC,GACD,MAAMC,EAAYD,EAASE,QAAQC,OAE/BH,EAASG,OADTF,GAAWG,OACO,CACdC,OAAO,EAAAf,EAAAgB,aAAcd,EACrBe,YAAY,EAAAjB,EAAAkB,eAAcP,EAAUQ,MAAMJ,OAVA,IAW1CK,WAAW,EAAApB,EAAAkB,eAAcP,EAAUQ,MAAME,MAXwB,IAenD,CACdN,MAAO,EACPE,WAAY,EACZG,UAAW,GAGnBV,EAASY,OAAOC,gBACZ,EAAAvB,EAAAkB,eAAcP,GAAWa,UAtBkE,GAsBnChB,KAAKD,UAAUe,OAAOG,U,CAEtFC,UAAUhB,GACN,OAAQA,EAASiB,YAAcjB,EAASkB,YAAclB,EAASE,QAAQC,QAAQC,M,CAEnFe,YAAYjB,KAAYkB,GACflB,EAAQC,SACTD,EAAQC,OAAS,IAAI,EAAAkB,EAAAC,SAEzB,IAAK,MAAMC,KAAUH,EACjBlB,EAAQC,OAAOqB,KAAKD,GAAQpB,O,CAGpCsB,OAAOzB,EAAU0B,GACR5B,KAAKkB,UAAUhB,KAGpB,EAAA2B,EAAAC,cAAa5B,EAAU0B,E,sEC1C/B,IAAApC,EAAAC,EAAA,S,aAEO,MAAMsC,EACTjC,cACIE,KAAKgB,SAAW,EAChBhB,KAAKM,QAAS,EACdN,KAAKW,MAAQ,IAAI,EAAAqB,EAAAC,Y,CAErBP,KAAKQ,GACD,GAAKA,SAGiBC,IAAlBD,EAAKlB,WACLhB,KAAKgB,UAAW,EAAAxB,EAAA4C,eAAcF,EAAKlB,gBAEnBmB,IAAhBD,EAAK5B,SACLN,KAAKM,OAAS4B,EAAK5B,aAEJ6B,IAAfD,EAAKvB,OACL,IAAI,EAAAnB,EAAA6C,UAASH,EAAKvB,OACdX,KAAKW,MAAMe,KAAK,CAAEnB,MAAO2B,EAAKvB,YAE7B,CACD,MAAM2B,EAAaJ,EAAKvB,WACDwB,IAAnBG,EAAWC,IACXvC,KAAKW,MAAMe,KAAK,CAAEnB,MAAO+B,IAGzBtC,KAAKW,MAAMe,KAAKQ,EAAKvB,M,4EC5BzC,IAAAnB,EAAAC,EAAA,SACO,MAAM+C,EACT1C,cACIE,KAAKO,MAAQ,GACbP,KAAKa,KAAO,E,CAEhBa,KAAKQ,GACIA,SAGcC,IAAfD,EAAK3B,QACLP,KAAKO,OAAQ,EAAAf,EAAA4C,eAAcF,EAAK3B,aAElB4B,IAAdD,EAAKrB,OACLb,KAAKa,MAAO,EAAArB,EAAA4C,eAAcF,EAAKrB,O,4ECd3C,IAAArB,EAAAC,EAAA,SACA,MAAuCgD,EAAH,EAAc9C,KAAKC,GAChD,SAAS8C,EAAaxC,EAAU0B,GACnC,MAAQvB,OAAQsC,GAAkBzC,EAASE,SAASC,OAAEA,GAAWH,EACjE,IAAKyC,GAAerC,SAAWD,EAC3B,OAEJ,MAAMI,EAAaJ,EAAOI,WAAamB,EAAMgB,OAAqD5B,EAAjCX,EAAOO,UAAYgB,EAAMgB,SAAkC1C,EAASY,OAAOC,gBANxH,GAM6Ja,EAAMgB,SAClLpD,EAAAqD,sBAP4E,IAOnCC,EAAML,GAAUM,SAAEA,GAAa7C,EAC7EG,EAAOE,OAASE,EACZJ,EAAOE,MAAQuC,IACfzC,EAAOE,OAASuC,GAEpBC,EAASC,GAAKhC,EAAWrB,KAAKsD,IAAI5C,EAAOE,OACzCwC,EAASG,GAAKlC,EAAWrB,KAAKwD,IAAIxD,KAAKyD,IAAI/C,EAAOE,O","sources":["node_modules/@tsparticles/updater-wobble/browser/WobbleUpdater.js","node_modules/@tsparticles/updater-wobble/browser/Options/Classes/Wobble.js","node_modules/@tsparticles/updater-wobble/browser/Options/Classes/WobbleSpeed.js","node_modules/@tsparticles/updater-wobble/browser/Utils.js"],"sourcesContent":["import { getRandom, getRangeValue, } from \"@tsparticles/engine\";\nimport { Wobble } from \"./Options/Classes/Wobble.js\";\nimport { updateWobble } from \"./Utils.js\";\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360, moveSpeedFactor = 10, defaultDistance = 0;\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt?.enable) {\n            particle.wobble = {\n                angle: getRandom() * doublePI,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / maxAngle,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / moveSpeedFactor,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance =\n            getRangeValue(wobbleOpt?.distance ?? defaultDistance) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source?.wobble);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n","import { isNumber, setRangeValue, } from \"@tsparticles/engine\";\nimport { WobbleSpeed } from \"./WobbleSpeed.js\";\nexport class Wobble {\n    constructor() {\n        this.distance = 5;\n        this.enable = false;\n        this.speed = new WobbleSpeed();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = setRangeValue(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            if (isNumber(data.speed)) {\n                this.speed.load({ angle: data.speed });\n            }\n            else {\n                const rangeSpeed = data.speed;\n                if (rangeSpeed.min !== undefined) {\n                    this.speed.load({ angle: rangeSpeed });\n                }\n                else {\n                    this.speed.load(data.speed);\n                }\n            }\n        }\n    }\n}\n","import { setRangeValue } from \"@tsparticles/engine\";\nexport class WobbleSpeed {\n    constructor() {\n        this.angle = 50;\n        this.move = 10;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = setRangeValue(data.angle);\n        }\n        if (data.move !== undefined) {\n            this.move = setRangeValue(data.move);\n        }\n    }\n}\n","import { millisecondsToSeconds } from \"@tsparticles/engine\";\nconst defaultDistance = 0, double = 2, doublePI = Math.PI * double, distanceFactor = 60;\nexport function updateWobble(particle, delta) {\n    const { wobble: wobbleOptions } = particle.options, { wobble } = particle;\n    if (!wobbleOptions?.enable || !wobble) {\n        return;\n    }\n    const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = (moveSpeed * ((particle.retina.wobbleDistance ?? defaultDistance) * delta.factor)) /\n        (millisecondsToSeconds / distanceFactor), max = doublePI, { position } = particle;\n    wobble.angle += angleSpeed;\n    if (wobble.angle > max) {\n        wobble.angle -= max;\n    }\n    position.x += distance * Math.cos(wobble.angle);\n    position.y += distance * Math.abs(Math.sin(wobble.angle));\n}\n"],"names":["$i0lBz","parcelRequire","$5c41889ef76a5c63$var$doublePI","Math","PI","$5c41889ef76a5c63$export$40b8dfc901f79b9a","constructor","container","this","init","particle","wobbleOpt","options","wobble","enable","angle","getRandom","angleSpeed","getRangeValue","speed","moveSpeed","move","retina","wobbleDistance","distance","pixelRatio","isEnabled","destroyed","spawning","loadOptions","sources","$ceJJN","Wobble","source","load","update","delta","$kFnkx","updateWobble","$8e8a4564c79f3420$export$e3332f9062c9ef49","$69VmK","WobbleSpeed","data","undefined","setRangeValue","isNumber","rangeSpeed","min","$47c014fe328d859a$export$9d1564e235810926","$f0b9bbe3ab655df7$var$doublePI","$f0b9bbe3ab655df7$export$c35033201341f652","wobbleOptions","factor","millisecondsToSeconds","max","position","x","cos","y","abs","sin"],"version":3,"file":"WobbleUpdater.a21a68b3.js.map"}