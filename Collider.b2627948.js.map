{"mappings":"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","sources":["node_modules/@tsparticles/interaction-particles-collisions/browser/Collider.js","node_modules/@tsparticles/interaction-particles-collisions/browser/ResolveCollision.js","node_modules/@tsparticles/interaction-particles-collisions/browser/Absorb.js","node_modules/@tsparticles/interaction-particles-collisions/browser/Bounce.js","node_modules/@tsparticles/interaction-particles-collisions/browser/Destroy.js"],"sourcesContent":["import { ParticlesInteractorBase, getDistance } from \"@tsparticles/engine\";\nimport { resolveCollision } from \"./ResolveCollision.js\";\nconst double = 2;\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * double);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n","import { absorb } from \"./Absorb.js\";\nimport { bounce } from \"./Bounce.js\";\nimport { destroy } from \"./Destroy.js\";\nexport function resolveCollision(p1, p2, delta, pixelRatio) {\n    switch (p1.options.collisions.mode) {\n        case \"absorb\": {\n            absorb(p1, p2, delta, pixelRatio);\n            break;\n        }\n        case \"bounce\": {\n            bounce(p1, p2);\n            break;\n        }\n        case \"destroy\": {\n            destroy(p1, p2);\n            break;\n        }\n    }\n}\n","import { clamp } from \"@tsparticles/engine\";\nconst half = 0.5, absorbFactor = 10, minAbsorbFactor = 0;\nfunction updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {\n    const factor = clamp((p1.options.collisions.absorb.speed * delta.factor) / absorbFactor, minAbsorbFactor, r2);\n    p1.size.value += factor * half;\n    p2.size.value -= factor;\n    if (r2 <= pixelRatio) {\n        p2.size.value = 0;\n        p2.destroy();\n    }\n}\nexport function absorb(p1, p2, delta, pixelRatio) {\n    const r1 = p1.getRadius(), r2 = p2.getRadius();\n    if (r1 === undefined && r2 !== undefined) {\n        p1.destroy();\n    }\n    else if (r1 !== undefined && r2 === undefined) {\n        p2.destroy();\n    }\n    else if (r1 !== undefined && r2 !== undefined) {\n        if (r1 >= r2) {\n            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);\n        }\n        else {\n            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);\n        }\n    }\n}\n","import { circleBounce, circleBounceDataFromParticle, getRangeValue } from \"@tsparticles/engine\";\nconst fixBounceSpeed = (p) => {\n    if (p.collisionMaxSpeed === undefined) {\n        p.collisionMaxSpeed = getRangeValue(p.options.collisions.maxSpeed);\n    }\n    if (p.velocity.length > p.collisionMaxSpeed) {\n        p.velocity.length = p.collisionMaxSpeed;\n    }\n};\nexport function bounce(p1, p2) {\n    circleBounce(circleBounceDataFromParticle(p1), circleBounceDataFromParticle(p2));\n    fixBounceSpeed(p1);\n    fixBounceSpeed(p2);\n}\n","import { bounce } from \"./Bounce.js\";\nexport function destroy(p1, p2) {\n    if (!p1.unbreakable && !p2.unbreakable) {\n        bounce(p1, p2);\n    }\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;\n        deleteP.destroy();\n    }\n}\n"],"names":["$i0lBz","parcelRequire","$da3b22dbf8d05fd4$export$b7c6eef0ebb06133","ParticlesInteractorBase","constructor","container","super","clear","init","interact","p1","delta","destroyed","spawning","this","pos1","getPosition","radius1","getRadius","query","particles","quadTree","queryCircle","p2","options","collisions","enable","mode","pos2","radius2","Math","abs","round","z","getDistance","$1GU8y","resolveCollision","retina","pixelRatio","isEnabled","particle","reset","$1C9HK","$13b5424f5b7ad8c1$export$3ea41c4ff8214d51","absorb","$arap5","bounce","$ex5aW","destroy","$12d0de2b9a623be3$var$updateAbsorb","r1","r2","factor","clamp","speed","size","value","$12d0de2b9a623be3$export$be8f954d9467d61e","undefined","$79947ef2bbe2fdf3$var$fixBounceSpeed","p","collisionMaxSpeed","getRangeValue","maxSpeed","velocity","length","$79947ef2bbe2fdf3$export$e3ce947fb98643bf","circleBounce","circleBounceDataFromParticle","$a948297d19dc8f3a$export$b1fb4cac938035f7","unbreakable"],"version":3,"file":"Collider.b2627948.js.map"}